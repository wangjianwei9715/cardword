<template>
  <view class="fixedInput" :style="{bottom:0,transform:`translateY(-${keyHeight}px)`}" v-if='showInput'>

    <input v-if='type=="digit"' class="showInput" @input='onInput' type="digit" ref="fixInput"  v-model="valueModel" :adjust-position='false' placeholder-style="color:#706f73" :placeholder="placeholder">
    <input v-if='type!="digit"' class="showInput" @input='onInput' type="text" ref="fixInput" @confirm='$emit("send")' confirm-type='send' v-model="valueModel" :adjust-position='false' placeholder-style="color:#706f73" :placeholder="placeholder">
    <text class="inputSubmit" @click='sendTalk'>{{needSend?'发送':'完成'}}</text>
  </view>
</template>
<script>
export default {
  model: {
    prop: "value",
    event: "handlerValueChange"
  },
  props: {
    showInput: {
      type: Boolean,
      default: false
    },
    value: {
      type: [Array, String, Number, Date, Boolean],
      default: null
    },
    placeholder: {
      type: String,
      default: ""
    },
    // 说点什么...
    needSend: {
      type: Boolean,
      default: false
    },
    type: {
      type: String,
      default: "text"
    },
    defaultValue: {
      type: String,
      default: ""
    },
    needSendH5Up: {
      type: Boolean,
      default: false
    },
    keyHeight: {
      type: Number,
      default: -2
    }
  },
  data() {
    return {
      keyHeight: -3,
      deviceInfo: getApp().globalData.app.platform.systemInfo
    };
  },
  beforeDestroy() {
    // uni.offKeyboardHeightChange(this.keyBoardHeightChange);
  },
  mounted() {
    // console.log('初始化发送优惠券界面',this.showInput);
    // uni.onKeyboardHeightChange(this.keyBoardHeightChange);
  },
  computed: {
    valueModel: {
      get: function() {
        // console.log("getValue", this.value);
        return this.value;
      },
      set: function(val) {
        this.$emit("handlerValueChange", val);
      }
    }
  },
  watch: {
    keyHeight: function(val, oldVal) {
      // console.log("keyHeight变化", val,oldVal);
      if (this.needSendH5Up) this.$emit("liftChat", val);
      if (val < 0 && val < oldVal) {
        console.log("收起键盘blur");
        this.$refs.fixInput.blur();
        this.$emit("update:showInput", false);
      }
    },
    showInput: function(val) {
      if (val) {
        setTimeout(() => {
          this.$refs.fixInput.focus();
        }, 50);
      }
    }
    //   showInput
  },
  methods: {
    onInput(event) {
      //   console.log(event.detail.value);
      if (!this.value) this.$emit("keyValueChange", event.detail.value);
    },
    keyBoardHeightChange(obj) {
      let _heightDiff =
        this.deviceInfo.screenHeight - this.deviceInfo.windowHeight;
      let _diff = obj.height - _heightDiff;
      // 键盘高度
      let height = (_diff > 0 ? _diff : 0) - 2;
      this.keyHeight = height;
      console.log(height, "高度变化", this.keyHeight);
    },
    sendTalk(value) {
      this.$refs.fixInput.blur();
      if (!this.needSend) {
        this.$emit("update:showInput", false);
        return;
      }
      this.$emit("send", this.value);
    }
  }
};
</script>
<style>
.fixedInput {
  position: fixed;
  opacity: 1;
  width: 750rpx;
  height: 100rpx;
  background-color: #fff;
  flex-direction: row;
  align-items: center;
  transition-property: transform;
  transition-duration: 0.25s;
  transition-delay: 0s;
  justify-content: space-between;
  transition-timing-function: linear;
  padding: 0 20rpx;
  /* transform: translateY(0) */
}

.showInput {
  border-radius: 30rpx;
  width: 540rpx;
  /* background-color: red; */
  background-color: #f3f3f5;
  font-size: 24rpx;
  padding: 0 30rpx;
  height: 60rpx;
}

.inputSubmit {
  width: 140rpx;
  height: 60rpx;
  background-image: linear-gradient(to bottom, #ef3333, #eb6141);
  border-radius: 25px;
  margin-left: 30rpx;
  color: #fff;
  font-size: 30rpx;
  text-align: center;
  line-height: 60rpx;
  text-align: center;
}
</style>
