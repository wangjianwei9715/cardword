<template>
	<view class="full">
		<video show-play-btn='false' show-center-play-btn='false' autoplay='true'
			style='width:750rpx;position:fixed;top:0;opacity: 0;' controls='false' :style="{height:height,width:width}"
			:src='LmRTMP' show-fullscreen-btn='false' object-fit='fill' show-loading='false' ref='videoLm'
			v-if='videoShow'></video>
		<video show-play-btn='false' show-center-play-btn='false' autoplay='true'
			style='width:750rpx;position:fixed;top:0' controls='false' :style="{height:height,width:width}"
			:src='liveRTMP' show-fullscreen-btn='false' object-fit='fill' show-loading='false' v-if='videoShow'
			ref='video'></video>

		<web-view :catchtouchmove="true" :style="{height:height,width:width}" id='webView' class="webView" ref="webview"
			:webview-styles="webviewStyles" @onPostMessage="handleMessage" :src="webViewUrl" v-if='viewShow'
			allow='microphone;camera;midi;encrypted-media;'>
		</web-view>
	</view>

</template>

<script lang="ts">
	import request from '@/net/nuveRequest'
	import permision from "@/js_sdk/wa-permission/permission"
	import {
		Md5
	} from 'ts-md5';
	import {
		PackageBase
	} from "@/net/PackageBase";
	import {
		Message
	} from "@/net/NetDefine";
	import * as proto from '../../net/proto';
	let UIImpactFeedbackGenerator = null;
	let impact = null;
	const isTest = false
	let sendNum = 1
	const app = getApp().globalData.app
	export default {
		data() {
			return {
				deviceInfo: getApp().globalData.app.platform.systemInfo, //设备信息
				height: null, //设备高
				width: null, //设备宽
				viewShow: true, //webView显示
				webLoadSuccess: false,
				webEvalTimer: null,
				webView: null, //webView实例
				webviewStyles: {
					progress: false
				},
				statusBarHeight: 0, //状态栏高度
				safeAreaBottomHeight: 0, //底部安全距离高度
				// http://192.168.8.26:8080/#/pages/liveStreaming/index
				webViewUrl: '', //webView地址
				videoShow: true,
				videoContxt: null, //视频实例
				videoLmContxt: null,//连麦播放器实例
				liveRTMP: '', //直播rtmp流地址
				LmRTMP: '',//连麦rtmp流地址
				AnchorEndUrl: 'https://xlsh.zjhlang.com:8088/live/#/pages/liveStreaming/theAnchorEnd?ts=' + (+new Date()),
				// AnchorEndUrl: 'http://192.168.8.26:8080/#/pages/liveStreaming/theAnchorEnd?ts=' + (+new Date()),
				// UserUrl: 'https://xlsh.zjhlang.com:8088/live/#/pages/liveStreaming/index?ts='+ (+new Date()),
				UserUrl: 'http://192.168.8.26:8080/#/pages/liveStreaming/index?ts=' + (+new Date()),
				deviceId: '', //设备ID用户用户未登录作为用户id进入直播间
				loginRoomData: {
					roomID: null,
					streamID: null,
					userID: null,
					userName: null,
					token: null
				},
				merchantMessage: {},
				appProfile: {

				},
				nowDate: new Date(),
				isAnchor: false, //是否为主播
				hasToken: Boolean(app.token.accessToken),
				tokenData: {
					token: '',
					anonymous: true, //是否匿名(不公开个人信息或者游客)
					uid: "",
					streamId: ""
				},
				liveData: {
					//状态  0 待直播,  1 即将直播  2 正在直播,  3 直播完成(回放)  -1 过期 -2 已取消
				},
				goodsDetail: {}, //商品详情信息

				roomLikeNum: 0, //房间点赞数量
				websocket: '',
				isConnectSocket: false,
				reconnectionTimer: null, //断线重连定时器
				heartBeatTimer: null, //心跳包定时器
				socketLoginOk: false, //socket房间是否登录成功
				socketRoomLoginTimer: null,
				androidWebProfileLoaded: false,
				registerList: ['BackLoginBroadCastRoom1001', 'BackLike', 'BroadCastLike', 'BroadCastBilibili_Send',
					'BackSendChatMessage', 'BroadCastChatMessage', 'BackSendHongbao', 'BroadCastHongbao',
					'BroadCastHongbaoUpdated', 'BackGrabHongbao', 'BackSendGift', 'BackSendMerchantCoupon',
					'BroadCastMerchantCoupon', 'SendMyPoint', "BackGetMerchantCoupon", "BroadCastLianmaiAllowed",
					"SendLianmaiApply",
					"BackApplyLianmai",
					"BroadCastLianmaiOn",
					"BroadCastLianmaiOff",
					"BackActorLianmaiData",
					"BackActorAgreeLianmaiApply",
					"BackTerminateLianmai",
					"BackGmChatBid",
					"BackGmKickOutRoom",
					"KickOut"
				],
				isLogin: false,
				systemKickOut: false,//是否为系统强制使用户退出房间
			}
		},
		onReady() {

			// plus.webview.create()
		},
		onShow() {
			uni.hideLoading()
		},
		onUnload() {
			uni.hideLoading()
			if (this.isLogin) this.leaveRoom()
		},

		async onLoad(query) {
			// 
			console.log('进入房间');
			if (this.deviceInfo.platform == 'android' && query.isAnchor == 'true') {
				permision.requestAndroidPermission('android.permission.CAMERA')
				permision.requestAndroidPermission('android.permission.RECORD_AUDIO')
			}
			this.$nextTick(() => {
				this.webView = this.$refs.webview
			})
			uni.$on('socketClose', this.socketClose)
			if (!query.roomID) return
			this.isAnchor = query.isAnchor
			this.webViewUrl = query.isAnchor == 'true' ? this.AnchorEndUrl : this.UserUrl
			// if (query.alias) this.getMerchant(query.alias)
			this.merchantMessage.alias = query.alias
			if (query.roomID) this.loginRoomData.roomID = query.roomID
			if (query.streamID) this.loginRoomData.streamID = query.streamID
			const {
				data
			} = await this.getLiveRoomInfo(+query.roomID)
			this.liveData = data
			this.deviceAssign(this.deviceInfo)
			// && query.isAnchor == 'true'
			// if (this.deviceInfo.platform == 'android') {
			// 	this.viewShow = false
			// 	this.createWebView(this.deviceInfo)
			// } else {
			// 	this.getUserProfile(this.deviceInfo)
			// }
this.viewShow = false
				this.createWebView(this.deviceInfo)
			if (this.deviceInfo.platform == 'ios') {
				UIImpactFeedbackGenerator = plus.ios.importClass('UIImpactFeedbackGenerator');
				impact = new UIImpactFeedbackGenerator();
			}
			this.$nextTick(() => {
				this.videoContxt = this.$refs.video
				this.videoLmContxt = this.$refs.videoLm
			})
		},
		watch: {
			liveRTMP: function (val) {
				console.log('准备开始播放了', this.videoContxt);
				console.log(val);
				if (val) this.videoContxt.play()
			},
			LmRTMP: function (val) {
				console.log('准备开始播放连麦了', this.videoLmContxt);
				if (val) this.videoLmContxt.play()
			},
			roomLikeNum: function (val, oldVal) {
				if (val != oldVal) this.informH5Action('changeLikeNum', val, false)
			}
		},
		methods: {
			async getAudioPower() {
				//获取音频权限安卓
				const value = permision.requestAndroidPermission('android.permission.RECORD_AUDIO')
				console.log('安卓用户音频权限', value);
			},
			socketClose(res) {
				console.log('socket断开了');
				//监听到断线
				this.isConnectSocket = false
				this.reconnectionTimer && clearInterval(this.reconnectionTimer)
				this.reconnectionSocket()
			},
			//创建socketMessage包并发送
			sendSocketMsg(packName, valueObject = null) {
				return new Promise((resolve, reject) => {
					if (app.sever && app.sever.isNetOK()) {
						let msg = new proto.message[packName]()
						if (valueObject && Object.keys(valueObject).length) {
							Object.keys(valueObject).forEach((key, index) => {
								msg[key] = valueObject[key]
							})
						}
						console.log(packName, msg)
						let buffer = proto.message[packName].encode(msg).finish();
						let pack = new PackageBase(Message[packName]);
						pack.d(buffer).to(app.sever);
						resolve({
							pack,
							buffer
						})
					} else {
						console.log(`发送${packName}包时socket暂未连接`, valueObject);
						uni.showToast({
							title: '连接状态异常',
							icon: 'none'
						})
					}

				})
			},
			//心跳包
			sendHeartBeat() {
				if (app.sever && app.sever.isNetOK()) {
					this.sendSocketMsg('HeartBeat', {
						time: new Date().getTime()
					})
				}
			},
			//登录房间socket
			sendWebsocketLogin() {
				uni.showLoading({
					title: '连接中...',
					mask: false
				})
				this.sendSocketMsg('LoginBroadCastRoom1001', {
					roomId: +this.loginRoomData.roomID,
					uid: this.tokenData.uid,
					token: this.loginRoomData.socketToken
				}).then(res => {
					this.isConnectSocket = true
					this.reconnectionTimer && clearInterval(this.reconnectionTimer)
				})
			},
			BackLoginBroadCastRoom1001(res) {
				console.log('登陆房间回调', res);
				if (res.msg) {
					this.socketLoginOk = false
					this.socketRoomLoginTimer && clearTimeout(this.socketRoomLoginTimer)
					this.socketRoomLoginTimer = setTimeout(() => {
						console.log('socket重新登录房间中')
						this.sendWebsocketLogin();
					}, 500)
				} else {
					uni.hideLoading()
					this.informH5Action('isGM', res.gm, false)
					this.informH5Action('myPointGet', res.point, false)
					this.informH5Action('canLM', res.applyLianmai, false)
					this.socketLoginOk = true
				}
				// if (Object.keys(res).length == 0) this.socketLoginOk = true
				// if (Object.keys(res).length) {

				// }
			},
			//离开房间
			leaveOutRoomSocket() {
				uni.$off('socketClose', this.socketClose)
				this.sendSocketMsg('LogoutBroadCastRoom1001', {
					roomId: +this.loginRoomData.roomID
				}).then(res => {
					console.log('socket离开房间');
					this.isConnectSocket = false
				})
				// app.sever.unregisterHandlers(this)
			},
			//连接sockey
			connectSever() {

				app.sever && app.sever.close();
				app.sever.setServerInfo({
					ip: this.websocket
					// ip: "ws://192.168.8.79:31700/ws"
				});
				app.sever.connect(
					() => {
						console.log(`这时socket的open状态:${app.sever.isNetOK()}`);
						let listeners = this.registerList;
						app.sever.registerHandlers(this, listeners, true)
						this.sendHeartBeat();
						app.sever.isNetOK() && this.sendWebsocketLogin();
					},
					() => {
						uni.showToast({
							title: '连接失败',
							icon: 'none'
						})
						this.isConnectSocket = false
					}
				);
			},
			reconnectionSocket() {
				if (this.isConnectSocket) return
				this.reconnectionTimer && clearInterval(this.reconnectionTimer)
				this.reconnectionTimer = setInterval(() => {
					console.log('断线重连中', new Date());
					this.initSocket(false)
					// this.sendWebsocketLogin();
					// this.sendHeartBeat();
				}, 5000)
			},
			initSocket(isFirst = true) {
				console.log(this.websocket);
				if (!this.websocket) return
				const socketInfo = uni.getStorageSync('socketInfo')
				this.heartBeatTimer && clearInterval(this.heartBeatTimer)
				this.heartBeatTimer = setInterval(() => {
					this.sendHeartBeat();
				}, 6 * 1000)
				this.connectSever();

			},
			SendMyPoint(res) {
				console.log('卡币数量变化', res);
				this.informH5Action('myPointGet', res.point)
			},
			//-------------------连麦---------------
			anchorEndOperationLM() {
				//主播切换是否可以连麦
				this.UIClickFeedBack()
				this.sendSocketMsg('RequestSwitchLianmaiAllow')
			},
			BroadCastLianmaiAllowed(res) {
				//广播是否可以连麦
				console.log(res);
				this.checkBack(res).then(data => {
					console.log('广播是否可以连麦', res);
					this.informH5Action('canLM', res.allowed, false)
				})
			},
			SendLianmaiApply(res) {
				// 发送给主播有人申请连麦
				console.log('发送给主播有人申请连麦', res);
				this.checkBack(res).then(data => {
					this.informH5Action('SendLianmaiApply', res)
				})
			},
			sendLianMai() {
				//申请连麦
				console.log('申请连麦了');
				uni.showLoading({
					title: ''
				})
				this.sendSocketMsg('RequestApplyLianmai', {})
			},
			BackApplyLianmai(res) {
				//申请连麦回调
				console.log("申请连麦回调", res);
				uni.hideLoading()
				this.checkBack(res)
			},
			BroadCastLianmaiOn(res) {
				//广播有人连麦了
				console.log("广播有人连麦了", res);
				this.checkBack(res).then(data => {
					this.informH5Action('BroadCastLianmaiOn', res)
				})
			},
			BroadCastLianmaiOff(res) {
				//广播连麦结束
				console.log("广播连麦结束", res);
				this.checkBack(res).then(data => {
					this.informH5Action('BroadCastLianmaiOff', res)
				})
			},
			SelfTerminateLianmai() {
				//连麦者结束连麦
				this.sendSocketMsg('SelfTerminateLianmai')
			},
			BackActorLianmaiData(res) {
				//返回主播连麦数据
				console.log("返回主播连麦数据", res);
				this.checkBack(res).then(data => {
					this.informH5Action('BackActorLianmaiData', res)
				})
			},
			ActorRequestLianmaiData(res) {
				//获取连麦列表
				this.sendSocketMsg('ActorRequestLianmaiData', {})
			},
			ActorAgreeLianmaiApply(uid) {
				//主播同意连麦
				this.sendSocketMsg('ActorAgreeLianmaiApply', { uid })
			},
			BackActorAgreeLianmaiApply(res) {
				//主播同意连麦的回调
				console.log("主播同意连麦的回调", res);
				this.checkBack(res)
			},
			ActorTerminateLianmai() {
				//主播结束连麦
				this.sendSocketMsg('ActorTerminateLianmai')
			},
			BackTerminateLianmai(res) {
				//主播结束连麦的回调
				console.log("主播结束连麦的回调", res);
			},
			SelfTerminateLianmai() {
				//连麦者结束连麦
				this.sendSocketMsg('SelfTerminateLianmai')
			},
			GmChatBid(uid, name) {
				//禁言
				uni.showLoading()
				console.log(uid ? { uid } : { name });
				// return
				this.sendSocketMsg('GmChatBid', uid ? { uid } : { name })
			},

			BackGmChatBid(res) {
				//禁言的回调
				console.log("禁言的回调", res);
				this.checkBack(res).then(data => {
					uni.showToast({
						title: '禁言成功'
					})
				})
			},
			BackGmKickOutRoom(res) {
				//踢出房间的回调
				console.log("踢出房间的回调", JSON.stringify(res));
				this.checkBack(res).then(data => {
					uni.showToast({
						title: '踢出房间成功'
					})
				})
			},
			GmKickOutRoom(uid, name) {
				//管理员进行踢出房间操作	
				this.sendSocketMsg('GmKickOutRoom', uid ? { uid } : { name })
			},
			KickOut(res) {
				console.log('被踢出房间的通知', JSON.stringify(res));
				this.systemKickOut = true
				uni.showModal({
					title: '提示',
					content: res.why,
					showCancel: false,
					success: (res) => {
						if (res.confirm) {
							// this.leaveRoom()
							uni.reLaunch({
								url: '/pages/index/index'
							})
						}
					}
				})
			},
			//-------------------发送消息------------
			sendTalk(content = '') {
				// console.log(content);
				this.sendSocketMsg('RequestSendChatMessage', {
					content,
				}).then(res => {
					console.log('发送成功!!!');
				})
			},
			BackSendChatMessage(res) {
				console.log('消息发送回调', res);
				this.checkBack(res)
			},
			BroadCastChatMessage(res) {
				console.log('我收到了消息', this.nowDate);
				// this.webView.evalJs(`actionSet("BroadCastChatMessageBack",${JSON.stringify({params:res})},false)`)
				this.informH5Action('BroadCastChatMessageBack', res, false)
			},
			//------------------发送优惠券---------------
			sendCoupon(sendItem) {
				console.log('发送的优惠券的参数', sendItem);
				this.sendSocketMsg('RequestSendMerchantCoupon', sendItem)
			},
			BackSendMerchantCoupon(res) {
				console.log('发送优惠券回调', res);
				this.checkBack(res).catch(err => {

				})
			},
			BroadCastMerchantCoupon(res) {
				console.log('广播优惠券', res);
				this.informH5Action('BroadCastMerchantCoupon', res)
			},
			getQuan(id) {
				this.sendSocketMsg('RequestGetMerchantCoupon', {
					id
				})
			},
			BackGetMerchantCoupon(res) {
				this.checkBack(res).then(res => {
					this.informH5Action('getCouponSuccess', res)
				}).catch(err => {
					this.informH5Action('getCouponFail', res)
				})
				console.log('抢券回调', res);
			},
			//-----------------发送礼物---------------
			sendGift(giftTpId, num, target = 0) {
				this.sendSocketMsg('RequestSendGift', {
					giftTpId,
					num,
					target
				})
			},
			BackSendGift(res) {
				//赠送礼物回调
				this.checkBack(res).then(back => {
					console.log('赠送礼物回调', res)
					this.informH5Action('giftSendSocketBack', {
						success: true
					})
				}).catch(err => {
					this.informH5Action('giftSendSocketBack', {
						success: false,
						msg: err.msg
					})
				})

			},
			BroadCastBilibili_Send(res) {
				console.log('广播礼物', res);
				this.informH5Action('BroadCastBilibili_Send', res, false)
			},
			//------------------发送红包---------------
			sendHonb(giftTpId, delayMinute) {
				console.log(giftTpId, delayMinute)
				this.sendSocketMsg('RequestSendHongbao', {
					giftTpId: giftTpId,
					delayMinute
				})
			},
			BackSendHongbao(res) {
				//发送红包回调
				console.log('发送红包回调', res);
				this.checkBack(res).then(back => {
					// console.log('赠送礼物回调',res)
					console.log('发送红包回调', res)
					// this.informH5Action('giftSendSocketBack',{success:true})
					// this.informH5Action('grabSuccess', res)
				}).catch(err => {
					// console.log('失败', res);
					// this.informH5Action('grabSuccess', res)
					// this.informH5Action('giftSendSocketBack',{success:false,msg:err.msg})
				})
			},

			BroadCastHongbao(res) {
				//广播红包
				console.log('广播红包', res)
				this.informH5Action('BroadCastHongbao', res)
			},
			BroadCastHongbaoUpdated(res) {
				//广播红包状态
				console.log('广播红包状态', res)
				this.informH5Action('BroadCastHongbaoUpdated', res, false)
			},
			grabHongbao(hongbaoId) {
				//抢红包
				this.sendSocketMsg('RequestGrabHongbao', {
					hongbaoId: Number(hongbaoId)
				})
			},
			BackGrabHongbao(res) {
				//抢红包回调

				this.checkBack(res).then(back => {
					// console.log('赠送礼物回调',res)
					console.log('抢红包回调', res)
					// this.informH5Action('giftSendSocketBack',{success:true})
					this.informH5Action('grabSuccess', res)
				}).catch(err => {
					console.log('失败', res);
					this.informH5Action('grabSuccess', res)
					// this.informH5Action('giftSendSocketBack',{success:false,msg:err.msg})
				})
			},
			//-------------

			BackLike(res) {
				console.log('点赞发送的结果回调', res);
			},
			BroadCastLike(res) {
				console.log('最终点赞数量', res.finalLikeNum);
				this.roomLikeNum = res.finalLikeNum
				this.informH5Action('hasOtherManClickLike', [this.roomLikeNum, res.list], true)

			},
			checkBack(res) {
				return new Promise((resolve, reject) => {
					if (res.msg) {
						uni.showToast({
							title: res.msg,
							icon: 'none'
						})
						reject(res.msg)
					} else {
						resolve(res)
					}
				})
			},
			leaveRoom() {
				this.leaveOutRoomSocket()

				if (this.webView) {
					this.webView.evalJs(
						`logOutRoom(${JSON.stringify(this.loginRoomData)})`
					)

				}
				console.log(this.tokenData.uid)
				if (this.tokenData.uid && !this.systemKickOut) {
					request('funcApi/brodcast/third/1001/user/logout/' + this.loginRoomData.roomID, {
						uid: this.tokenData.uid
					}, 'post').then(res => {
						console.log(res);
					})
				}

			},
			createWebView(res) {

				console.log('创建webview');
				const now = plus.webview.currentWebview()
				this.webView = plus.webview.create(this.webViewUrl, 'androidWeb', {
					webviewBGTransparent: true,
					// hardwareAccelerated:true,
					softinputNavBar: 'none',
					kernel:'WKWebview'
				})
				console.log('是否开启硬件加速', plus.webview.defaultHardwareAccelerated());
				this.webView.evalJs = this.webView.evalJS
				now.append(this.webView)

				this.webView.addEventListener('titleUpdate', (event) => {
					const h5Event = JSON.parse(event.title)
					this.handleMessage(h5Event)
				})

				this.webView.addEventListener('loaded', (event) => {
					console.log('房间加载完成');
					this.webLoadSuccess = true
					if (!this.androidWebProfileLoaded) this.getUserProfile(res)
				})
			},
			//webview高度,设备相关
			deviceAssign(res) {
				this.deviceId = res.deviceId
				const hasNotchInScreen = plus.navigator.hasNotchInScreen()
				const safeAreaBottomHeight = res.screenHeight - res.safeArea.bottom
				this.safeAreaBottomHeight = safeAreaBottomHeight
				const iosHeight = res.screenHeight + res.statusBarHeight + safeAreaBottomHeight
				this.statusBarHeight = res.statusBarHeight
				this.height = hasNotchInScreen ? iosHeight : res.screenHeight
				this.width = res.screenWidth
				this.viewShow = true
				uni.hideLoading()
			},
			//获取直播间信息
			async getLiveRoomInfo(roomID) {
				const ts = Math.round(+new Date() / 1000)
				const params = {
					ts,
					sign: Md5.hashStr(`1001room_${roomID}_${ts}`)
				}
				return request('funcApi/brodcast/third/1001/roomInfo/' + roomID, params, 'get')
			},
			//获取及赋值 
			async getUserProfile(deviceInfo) {
				try {
					let userData = {}
					const device = Md5.hashStr(deviceInfo.deviceId)
					const tokenRespone = await request('funcApi/brodcast/third/1001/user/login/' + this.loginRoomData
						.roomID, {version: '1.0.0'},
						'post')
					this.websocket = tokenRespone.websocket
					this.tokenData = tokenRespone.data
					console.log('直播间用户登录数据66666666');
					console.log(JSON.stringify(tokenRespone));
					if (this.hasToken) {
						const {
							data
						} = await request('me/home', {}, 'get')
						userData = data
						//匿名
						if (this.tokenData.anonymous) {
							userData.avatar =
								'https://ka-world.oss-cn-shanghai.aliyuncs.com/admin/debug/2022.06.07/teamContest/teamContest_index/0/1654582097412np07eg7ntj.png'
							userData.name = this.tokenData.uname
						}
						//如果为主播的情况下 头像使用商家头像//昵称也使用商家昵称
						// if (this.isAnchor == 'true') {
						// 	userData.avatar = decodeURIComponent(this.merchantMessage.logo)
						// 	userData.name = this.merchantMessage.name
						// }
					} else {
						//用设备号
						userData = {
							name: this.tokenData.uname,
							userId: this.tokenData.uid
						}
					}
					this.loginRoom(userData, tokenRespone.data, deviceInfo)
					this.initSocket(true)
					this.isLogin = true
				} catch (err) {
					if (err == '禁止登录') {
						uni.showModal({
							title: '提示',
							content: '你已被禁止登录该直播间',
							showCancel: false,
							success: (res) => {
								if (res.confirm) {
									uni.reLaunch({
										url: '/pages/index/index',
										fail: (fail) => {
											console.log('jumpFail', fail);
										}
									})
								}
							}
						})
					}
					console.log(err);
				}
			},
			SET_CDN_URL(cdnData) {
				console.log('收到cdn', cdnData);
				this.liveRTMP = cdnData.urlsRTMP
			},
			LMRTMP_SET(cdnData) {
				console.log('收到连麦cdn', cdnData);
				this.LmRTMP = cdnData.urlsRTMP
			},
			stopPull() {
				this.videoContxt.stop()
				this.liveRTMP = ''

			},
			stopLMPull() {
				this.videoLmContxt.stop()
				this.LmRTMP = ''
			},
			hideVideo() {
				this.videoContxt.stop()
				this.videoLmContxt.stop()
				// this.videoShow=false
			},
			pageLoadSuccess() {

			},
			canEval() {
				console.log(66666666, 'canEval');
				this.webView = this.$refs.webview
				this.webLoadSuccess = true

			},
			loginRoom(userData, roomTokenData, deviceInfo) {
				this.appProfile = {
					...userData,
					...this.tokenData
				}
				this.loginRoomData.userID = roomTokenData.uid
				this.loginRoomData.userName = userData.name
				this.loginRoomData.token = roomTokenData.token
				this.loginRoomData.socketToken = roomTokenData.socketToken
				this.loginRoomData.streamID = roomTokenData.streamId || null
				this.loginRoomData.alias = this.merchantMessage.alias
				this.androidWebProfileLoaded = true
				this.againLogin()
			},
			againLogin() {
				this.webEvalTimer = setInterval(() => {
					if (!this.webLoadSuccess) return
					console.log('开始evalJs');
					this.webView.evalJs(`setToken(${JSON.stringify(app.token)})`)
					// setInterval(()=>{
					// 	this.webView.evalJs(`actionSet("8888",${JSON.stringify(app.token)},false)`)
					// },2000)
					this.webView.evalJs(`isWebView()`)
					this.webView.evalJs(
						`statusBarHeight=${this.deviceInfo.statusBarHeight}`
					) //通知webView手机状态栏高度
					this.webView.evalJs(
						`loginRoom(${JSON.stringify(this.loginRoomData)},${JSON.stringify(this.appProfile)},${JSON.stringify(this.liveData)})`
					) //登录房间
					clearInterval(this.webEvalTimer)
					// this.pushStream()
				}, 100)
			},
			// //发送卡密
			// sendCard(item) {
			// 	this.informH5Action('cardSend', item.name)
			// 	this.UIClickFeedBack()
			// 	this.cardShow = false
			// },
			// //调用h5发送弹幕
			// sendText(text) {
			// 	this.informH5Action('cardSend', text)
			// },
			//ui触感反馈(单次)
			UIClickFeedBack() {
				if (this.deviceInfo.platform == 'ios') {
					impact.prepare();
					impact.init(1);
					impact.impactOccurred();
					// this.webView.evalJs(`actionSet("8888",${JSON.stringify(app.token)},false)`)
				} else {
					uni.vibrateShort()
				}
			},
			//调用h5Vue内部methods方法
			informH5Action(actionName, params = '', isMoreArguments = false) {
				const sendParams = JSON.stringify({
					params: params
				})
				this.webView.evalJs(
					`actionSet("${actionName}",${sendParams},${isMoreArguments})`
				)
				console.log('发送给h5l ')
			},
			getMerchant(merchantId) {
				request('merchant/1/detail/' + merchantId, {}, 'get').then(res => {
					this.merchantMessage = res.data
				})
			},
			stopLive() {
				const stopSign = Md5.hashStr('stopPushStream' +
					`_${this.loginRoomData.roomID}_${this.loginRoomData.streamID}`)
				request('funcApi/brodcast/third/1001/achor/stopPush/' + this.loginRoomData.roomID, {
					sign: stopSign
				}, "post").then(res => {
					console.log('结束直播');
				}).catch(err => {
					console.log(err);
				})
			},
			//推流
			pushStream() {
				//首次推流获取streamID,改变直播状态
				if (this.liveData && this.liveData.state <= 1) request('funcApi/brodcast/third/1001/achor/push/' + this
					.loginRoomData.roomID, {}, 'post')
			},
			//点赞
			addLike(likeNum) {
				console.log('发送的点赞数量', likeNum);
				this.sendSocketMsg('RequestLike', {
					num: +likeNum
				}).then(res => {
					// console.log('发送点赞包成功'+ +likeNum, msg);
					sendNum += 1
					// console.log(''sendNum);
				})
				// request('brodcast/third/1001/user/like/' + this.loginRoomData.roomID, {
				// 	num: likeNum,
				// 	uid: this.loginRoomData.userID
				// }, 'post').then(res => {
				// 	this.roomLikeNum = res.data.totalNum
				// })
			},
			noneAuthTips() {
				uni.showModal({
					title: '温馨提示',
					content: '请前往系统设置,手动开启录音、相机等权限后,重新进入直播间',
					showCancel: false,
					success: ({
						confirm
					}) => {
						if (confirm) permision.gotoAppPermissionSetting()
					}
				})
			},
			back() {
				uni.navigateBack({
					delta: 1
				})
			},
			refreshToken() { },
			// netWork
			share() {
				uni.showLoading({
					title: '请稍等'
				})
				uni.share({
					provider: "weixin",
					type: 0,
					imageUrl: decodeURIComponent(this.liveData.cover),
					title: "拆卡进行中！",
					summary: '拆卡进行中！',
					scene: "WXSceneSession",
					href: `${app.H5Url}/share/h5/#/pages/live/liveShare?roomID=${this.loginRoomData
						.roomID}`,
					success: (res) => { },
					fail: (err) => {
						console.log("失败原因=>", err);
						uni.showToast({
							title: "分享失败",
							icon: "none"
						});
					},
					complete: (res) => {
						uni.hideLoading()

					}
				});
			},
			loginError(err) {
				// uni.showToast({
				// 	title: '房间进入失败',
				// 	icon: 'none'
				// })
				// console.log();
			},
			pageJump(url, type = 'navigateTo') {
				uni[type]({
					url
				})
			},
			handleMessage(event) {
				//接收webViewPostMessage
				const {
					data
				} = event.detail
				const resData = data[0]
				const paramsIsArray = resData.params instanceof Array
				paramsIsArray && resData.isMoreArguments ? this[resData.action](...resData.params) : this[resData.action](
					resData.params)
			}
		}
	}
</script>

<style>
	.full {
		/* background-color: black; */
		position: fixed;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		overflow: hidden;
	}

	.webView {
		position: fixed;
	}

	.envelope {
		width: 100rpx;
		height: 100rpx;
		background: red;
		position: absolute;
		bottom: -110rpx;
	}

	.envelopeModal {
		width: 750rpx;
		height: 400rpx;
		top: 340rpx;
		position: fixed;
		justify-content: center;
		align-items: center;
		transition-property: transform;
		transition-duration: 0.3s;
		transition-delay: 0s;
		transition-timing-function: ease;
		transform: scale(0)
	}

	.envelopeModalShow {
		transform: scale(1)
	}

	.envelopeModal-pack {
		width: 300rpx;
		height: 400rpx;
		background: red;
	}

	/* ------------商品信息-------------- */
	.goodsDetail {
		background-color: #fff;
		height: 900rpx;
		bottom: 0;
		align-items: stretch;
		padding: 20rpx;
	}

	.goodsBlock {
		width: 750rpx;
		flex-direction: row;
		align-items: center;
	}

	.goodsImageBlock {
		width: 250rpx;
		height: 250rpx;
	}

	.goodsImage {
		position: absolute;
		top: 0;
		width: 250rpx;
		height: 250rpx;
	}

	.goodsState {
		width: 250rpx;
		height: 40rpx;
		text-align: center;
		font-size: 24rpx;
		color: #fff;
		line-height: 40rpx;
		position: absolute;
		bottom: 0;
		background-color: rgba(255, 64, 77, .8);
	}

	/* -----------------------卡密--------------- */
	.card {
		background-color: #fff;
		height: 800rpx;
		align-items: center;
		font-size: 22rpx;
		padding-top: 30rpx;
	}

	.card-title {
		width: 750rpx;
		flex-direction: row;
		align-items: center;
		position: relative;
		margin-bottom: 10rpx;
		justify-content: center;
	}

	.card-title-text {
		text-align: center;
		font-size: 28rpx;
	}

	.card-title-img {
		width: 30rpx;
		height: 30rpx;
		position: absolute;
		right: 50rpx;
	}

	.safe {
		background: #000000;
		width: 750rpx;
	}

	.card-scroll {
		height: 670rpx;
	}

	.card-index {
		width: 690rpx;
		/* box-sizing: border-box; */
		display: flex;
		align-items: center;
		justify-content: space-between;
		background: #fff;
		margin-top: 20rpx;
		/* flex-dr */
		flex-direction: row;
		font-size: 22rpx;

	}

	/* ----------------------------------- */


	.card-left {
		width: 660rpx;

		background: #F6F7F8;
		padding: 10rpx 20rpx;
	}

	.card-left-text {
		font-weight: 400;
		font-size: 22rpx;
	}

	.card-right {
		width: 86rpx;
		display: flex;
		align-items: center;
		justify-content: center;
		text-align: center;
		font-size: 21rpx;
		font-family: Source Han Sans CN;
		font-weight: 400;
		color: #fff;
		background: #CCCCCC;
	}
</style>