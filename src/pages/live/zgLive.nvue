<template>
	<view class="full">
		<video show-play-btn='false' show-center-play-btn='false' autoplay='true'
			style='width:750rpx;position:fixed;top:0' controls='false' :style="{height:height,width:width}"
			:src='liveRTMP' show-fullscreen-btn='false' object-fit='fill' show-loading='false' ref='video'></video>
		<web-view :catchtouchmove="true" :style="{height:height,width:width}" id='webView' class="webView" ref="webview"
			:webview-styles="webviewStyles" @onPostMessage="handleMessage" :src="webViewUrl" v-if='viewShow'
			allow='microphone;camera;midi;encrypted-media;'>
		</web-view>
		<!-- <template v-if='webLoadSuccess'>
			<view class="publicBottom card" :class="{publicBottomShow:cardShow}">
				<view class='card-title'>
					<text class='card-title-text'>商品卡密</text>
					<image class='card-title-img' @click='cardShow=false' src='../../static/pay/guanbi@2x.png'></image>
				</view>
				<scroll-view class='card-scroll' :scroll-y='true' @scrolltolower='cardReachBottom'>
					<view class="card-index" v-for="(items,indexs) in card.list" :key="indexs" @click='sendCard(items)'>
						<view class="card-left">
							<text class="card-left-text" :style="{color:txtIndex==0?'#333333':'#ef3333'}"
								:key="txtIndex" v-for="(txtItem,txtIndex)  in getNameReward(items.name)">
								{{txtItem}}
							</text>
						</view>
					</view>
				</scroll-view>
			</view>
		</template> -->
	</view>

</template>

<script lang="ts">
	import request from '@/net/nuveRequest'
	import permision from "@/js_sdk/wa-permission/permission"
	import {
		Md5
	} from 'ts-md5/dist/md5';
	// import {app} from '@/app'
	import {
		PackageBase
	} from "@/net/PackageBase";
	import {
		SocketServer
	} from '@/net/SocketServer'
	import {
		Message
	} from "@/net/NetDefine";
	// import PackageBase from "@/net/PackageBase.ts";
	import * as proto from '../../net/proto';
	let UIImpactFeedbackGenerator = null;
	let impact = null;
	const isTest = false
	let sendNum = 1
	export default {
		data() {
			return {
				app: getApp().globalData.app,
				deviceInfo: getApp().globalData.app.platform.systemInfo, //设备信息
				height: null, //设备高
				width: null, //设备宽
				viewShow: true, //webView显示
				webLoadSuccess: false,
				webEvalTimer: null,
				webView: null, //webView实例
				webviewStyles: {
					progress: false
				},
				server: new SocketServer(),
				statusBarHeight: 0, //状态栏高度
				safeAreaBottomHeight: 0, //底部安全距离高度
				// http://192.168.8.26:8080/#/pages/liveStreaming/index
				webViewUrl: '', //webView地址
				videoShow: false,
				videoContxt: null, //视频实例
				liveRTMP: '', //直播rtmp流地址
				AnchorEndUrl: 'https://xlsh.zjhlang.com:8088/live/#/pages/liveStreaming/theAnchorEnd?ts=' + (+new Date()),
				UserUrl: 'http://192.168.8.26:8080/#/pages/liveStreaming/index?ts=' + (+new Date()),
				deviceId: '', //设备ID用户用户未登录作为用户id进入直播间
				loginRoomData: {
					roomID: null,
					streamID: null,
					userID: null,
					userName: null,
					token: null
				},
				merchantMessage: {},
				appProfile: {

				},
				isAnchor: false, //是否为主播
				hasToken: Boolean(uni.getStorageSync("token") && JSON.parse(uni.getStorageSync("token"))
					.accessToken),
				context: null,
				tokenData: {
					token: '',
					anonymous: true, //是否匿名(不公开个人信息或者游客)
					uid: "",
					streamId: ""
				},
				liveData: {
					//状态  0 待直播,  1 即将直播  2 正在直播,  3 直播完成(回放)  -1 过期 -2 已取消
				},
				goodsDetail: {}, //商品详情信息

				roomLikeNum: 0, //房间点赞数量
				cardList: [],
				card: {
					list: [],
					totalPage: 0
				},
				cardQuery: {
					pageIndex: 1,
					pageSize: 30,
				},
				websocket: '',
				isConnectSocket: false,
				reconnectionTimer: null, //断线重连定时器
				heartBeatTimer: null //心跳包定时器
			}
		},
		onReady() {
			// plus.webview.create()
		},
		watch: {
			liveRTMP: function(val) {
				if (val) this.videoContxt.play()
			}
		},
		async onLoad(query) {
			// 
			if (this.deviceInfo.platform == 'android' && query.isAnchor == 'true') {
				permision.requestAndroidPermission('android.permission.CAMERA')
				permision.requestAndroidPermission('android.permission.RECORD_AUDIO')
			}
			this.$nextTick(() => {
				this.webView = this.$refs.webview
			})
			uni.$on('socketClose', this.socketClose)

			if (!query.roomID) return
			this.isAnchor = query.isAnchor
			this.webViewUrl = query.isAnchor == 'true' ? this.AnchorEndUrl : this.UserUrl
			// if (query.alias) this.getMerchant(query.alias)
			this.merchantMessage.alias = query.alias
			if (query.roomID) this.loginRoomData.roomID = query.roomID
			if (query.streamID) this.loginRoomData.streamID = query.streamID
			const {
				data
			} = await this.getLiveRoomInfo(+query.roomID)
			this.liveData = data
			console.log(this.liveData);
			this.deviceAssign(this.deviceInfo)
			// 
			if (this.deviceInfo.platform == 'android'&& query.isAnchor == 'true') {
				this.createWebView(this.deviceInfo)
			} else {
				this.getUserProfile(this.deviceInfo)
			}
			if (this.deviceInfo.platform == 'ios') {
				UIImpactFeedbackGenerator = plus.ios.importClass('UIImpactFeedbackGenerator');
				impact = new UIImpactFeedbackGenerator();
			}
			// this.getGoodsDetail(data.goodCode)
			// uni.getSystemInfo({
			// 	success: (res) => {

			// 		// this.deviceInfo = res
			// 		//安卓且为主播端的情况下

			// 	}
			// });
			this.$nextTick(() => {
				this.videoContxt = this.$refs.video
			})
		},
		onShow() {
			uni.hideLoading()
		},
		onUnload() {

			this.leaveRoom()
		},
		watch: {
			roomLikeNum: function(val, oldVal) {
				if (val != oldVal) this.informH5Action('changeLikeNum', val)
			}
		},
		methods: {
			socketClose(res) {
				console.log('socket断开了');
				//监听到断线
				this.isConnectSocket = false
				this.reconnectionTimer && clearInterval(this.reconnectionTimer)
				this.reconnectionSocket()
			},
			//创建socketMessage包并发送
			sendSocketMsg(packName, valueObject = null) {
				return new Promise((resolve, reject) => {
					if (this.server && this.server.isNetOK()) {
						let msg = new proto.message[packName]()
						if (valueObject && Object.keys(valueObject).length) {
							Object.keys(valueObject).forEach((key, index) => {
								msg[key] = valueObject[key]
							})
						}
						let buffer = proto.message[packName].encode(msg).finish();
						let pack = new PackageBase(Message[packName]);
						pack.d(buffer).to(this.server);
						resolve({
							pack,
							buffer
						})
					} else {
						uni.showToast({
							title: '连接状态异常',
							icon: 'none'
						})
					}

				})
			},
			//心跳包
			sendHeartBeat() {
				if (this.server && this.server.isNetOK()) {
					this.sendSocketMsg('HeartBeat', {
						time: new Date().getTime()
					})
				}
			},
			//登录房间socket
			sendWebsocketLogin() {
				this.sendSocketMsg('LoginBroadCastRoom1001', {
					roomId: +this.loginRoomData.roomID,
					uid: this.tokenData.uid,
					token: this.loginRoomData.socketToken
				}).then(res => {
					this.isConnectSocket = true
					this.reconnectionTimer && clearInterval(this.reconnectionTimer)
				})
			},
			//离开房间
			leaveOutRoomSocket() {
				uni.$off('socketClose', this.socketClose)
				this.sendSocketMsg('LogoutBroadCastRoom1001', {
					roomId: +this.loginRoomData.roomID
				}).then(res => {
					console.log('socket离开房间');
					this.isConnectSocket = false
				})
			},
			//连接sockey
			connectSever() {
				this.server && this.server.close();
				this.server.setServerInfo({
					// ip: this.websocket
					ip: "ws://192.168.8.79:31700/ws"
				});
				this.server.connect(
					() => {
						this.sendHeartBeat();
						this.sendWebsocketLogin();
					},
					() => {
						uni.showToast({
							title: '连接失败',
							icon: 'none'
						})
						this.isConnectSocket = false
					}
				);
			},
			reconnectionSocket() {
				if (this.isConnectSocket) return
				this.reconnectionTimer && clearInterval(this.reconnectionTimer)
				this.reconnectionTimer = setInterval(() => {
					console.log('断线重连中', new Date());
					this.initSocket(false)
				}, 5000)
			},
			initSocket(isFirst = true) {
				const socketInfo = uni.getStorageSync('socketInfo')
				this.heartBeatTimer && clearInterval(this.heartBeatTimer)
				this.heartBeatTimer = setInterval(() => {
					this.sendHeartBeat();
				}, 6 * 1000)
				this.connectSever();
				if (isFirst) {
					let listeners = ['BackLoginBroadCastRoom1001', 'BackLike', 'BroadCastLike', 'BroadBilibili'];
					this.server.registerHandlers(this, listeners)
				}
			},
			BackLoginBroadCastRoom1001(res) {
				console.log('登陆房间回调', res);
			},
			BackLike(res) {
				console.log('点赞发送的结果回调', res);
			},
			BroadCastLike(res) {
				console.log('最终点赞数量', res.finalLikeNum);
				this.roomLikeNum = res.finalLikeNum
				this.informH5Action('hasOtherManClickLike', this.roomLikeNum)
			},
			BroadBilibili(res) {
				console.log('弹幕消息回调', res);
			},
			leaveRoom() {
				this.leaveOutRoomSocket()

				if (this.webView) {
					this.webView.evalJs(
						`logOutRoom(${JSON.stringify(this.loginRoomData)})`
					)

				}
				console.log(this.tokenData.uid)
				if (this.tokenData.uid) request('funcApi/brodcast/third/1001/user/logout/' + this.loginRoomData.roomID, {
					uid: this.tokenData.uid
				}, 'post').then(res => {
					console.log(res);
				})

			},
			createWebView(res) {
				console.log('创建webview');
				const now = plus.webview.currentWebview()
				this.webView = plus.webview.create(this.webViewUrl, 'androidWeb')
				this.webView.evalJs = this.webView.evalJS
				now.append(this.webView)
				this.viewShow = false
				this.webView.addEventListener('titleUpdate', (event) => {
					const h5Event = JSON.parse(event.title)
					this.handleMessage(h5Event)
				})

				this.webView.addEventListener('loaded', (event) => {
					console.log('房间加载完成');
					this.webLoadSuccess = true
					this.getUserProfile(res)
				})
			},
			//webview高度,设备相关
			deviceAssign(res) {
				this.deviceId = res.deviceId
				const hasNotchInScreen = plus.navigator.hasNotchInScreen()
				const safeAreaBottomHeight = res.screenHeight - res.safeArea.bottom
				this.safeAreaBottomHeight = safeAreaBottomHeight
				const iosHeight = res.screenHeight + res.statusBarHeight + safeAreaBottomHeight
				this.statusBarHeight = res.statusBarHeight
				this.height = hasNotchInScreen ? iosHeight : res.screenHeight
				this.width = res.screenWidth
				this.viewShow = true
				uni.hideLoading()
			},
			//获取直播间信息
			async getLiveRoomInfo(roomID) {
				const ts = Math.round(+new Date() / 1000)
				const params = {
					ts,
					sign: Md5.hashStr(`1001room_${roomID}_${ts}`)
				}
				return request('funcApi/brodcast/third/1001/roomInfo/' + roomID, params, 'get')
			},
			//获取及赋值 
			async getUserProfile(deviceInfo) {
				let userData = {}
				const device = Md5.hashStr(deviceInfo.deviceId)
				const tokenRespone = await request('funcApi/brodcast/third/1001/user/login/' + this.loginRoomData
					.roomID, {},
					'post')
				this.websocket = tokenRespone.websocket
				this.tokenData = tokenRespone.data
				console.log(tokenRespone);
				if (this.hasToken) {
					const {
						data
					} = await request('me/home', {}, 'get')
					userData = data
					//匿名
					if (this.tokenData.anonymous) {
						userData.avatar =
							'https://ka-world.oss-cn-shanghai.aliyuncs.com/admin/debug/2022.06.07/teamContest/teamContest_index/0/1654582097412np07eg7ntj.png'
						userData.name = this.tokenData.uname
					}
					//如果为主播的情况下 头像使用商家头像//昵称也使用商家昵称
					if (this.isAnchor == 'true') {
						userData.avatar = decodeURIComponent(this.merchantMessage.logo)
						userData.name = this.merchantMessage.name
					}
				} else {
					//用设备号
					userData = {
						name: this.tokenData.uname,
						userId: this.tokenData.uid
					}
				}
				this.loginRoom(userData, tokenRespone.data, deviceInfo)
				setTimeout(() => {
					this.initSocket(true)
				}, 1000)
			},
			SET_CDN_URL(cdnData) {
				this.liveRTMP = cdnData.urlsRTMP
			},
			stopPull() {
				this.videoContxt.stop()
				this.liveRTMP = ''

			},
			pageLoadSuccess() {

			},
			canEval() {
				this.webLoadSuccess = true
			},
			loginRoom(userData, roomTokenData, deviceInfo) {
				this.appProfile = {
					...userData,
					...this.tokenData
				}
				this.loginRoomData.userID = roomTokenData.uid
				this.loginRoomData.userName = userData.name
				this.loginRoomData.token = roomTokenData.token
				this.loginRoomData.socketToken = roomTokenData.socketToken
				this.loginRoomData.streamID = roomTokenData.streamId || null
				this.loginRoomData.alias = this.merchantMessage.alias
				this.againLogin()
			},
			againLogin() {
				this.webEvalTimer = setInterval(() => {
					if (!this.webLoadSuccess) return
					this.webView.evalJs(`setToken(${JSON.stringify(this.app.token)})`)
					this.webView.evalJs(`isWebView()`)
					this.webView.evalJs(
						`statusBarHeight=${this.deviceInfo.statusBarHeight}`
					) //通知webView手机状态栏高度
					this.webView.evalJs(
						`loginRoom(${JSON.stringify(this.loginRoomData)},${JSON.stringify(this.appProfile)},${JSON.stringify(this.liveData)})`
					) //登录房间
					clearInterval(this.webEvalTimer)
				}, 100)
			},

			openCard() {
				this.cardQuery.pageIndex = 1
				this.getNoList()
			},
			//发送卡密
			sendCard(item) {
				this.informH5Action('cardSend', item.name)
				this.UIClickFeedBack()
				this.cardShow = false
			},
			//调用h5发送弹幕
			sendText(text) {
				this.informH5Action('cardSend', text)
			},
			//ui触感反馈(单次)
			UIClickFeedBack() {
				if (this.deviceInfo.platform == 'ios') {
					impact.prepare();
					impact.init(1);
					impact.impactOccurred();
				} else {
					uni.vibrateShort()
				}
			},
			//调用h5Vue内部methods方法
			informH5Action(actionName, params = '', isMoreArguments = false) {
				const sendParams = JSON.stringify({
					params: params
				})
				this.webView.evalJs(
					`actionSet("${actionName}",${sendParams},${isMoreArguments})`
				)
			},
			getMerchant(merchantId) {
				request('merchant/1/detail/' + merchantId, {}, 'get').then(res => {
					this.merchantMessage = res.data
				})
			},
			// getGoodsDetail(id) {
			// 	let ts = Math.floor(new Date().getTime() / 1000);
			// 	let params = {
			// 		ts: ts,
			// 		s: Md5.hashStr('kww_good_sign_' + id + '_' + ts + '_2022')
			// 	}
			// 	request('dataApi/good/' + id + '/detail', params, 'get').then(data => {
			// 		if (data.good == null || data.good == undefined) {
			// 			uni.showToast({
			// 				title: '无此商品',
			// 				icon: 'none'
			// 			})
			// 			return;
			// 		}
			// 	})
			// },
			stopLive() {
				const stopSign = Md5.hashStr('stopPushStream' +
					`_${this.loginRoomData.roomID}_${this.loginRoomData.streamID}`)
				request('funcApi/brodcast/third/1001/achor/stopPush/' + this.loginRoomData.roomID, {
					sign: stopSign
				}, "post").then(res => {
					console.log('结束直播');
				}).catch(err => {
					console.log(err);
				})
			},
			//推流
			pushStream() {
				//首次推流获取streamID,改变直播状态
				if (this.liveData && this.liveData.state <= 1) request('funcApi/brodcast/third/1001/achor/push/' + this
					.loginRoomData.roomID, {}, 'post')
			},
			//点赞
			addLike(likeNum) {
				console.log('发送的点赞数量', likeNum);
				this.sendSocketMsg('RequestLike', {
					num: +likeNum
				}).then(res => {
					// console.log('发送点赞包成功'+ +likeNum, msg);
					sendNum += 1
					// console.log(''sendNum);
				})
				// request('brodcast/third/1001/user/like/' + this.loginRoomData.roomID, {
				// 	num: likeNum,
				// 	uid: this.loginRoomData.userID
				// }, 'post').then(res => {
				// 	this.roomLikeNum = res.data.totalNum
				// })
			},
			noneAuthTips() {
				uni.showModal({
					title: '温馨提示',
					content: '请前往系统设置,手动开启录音、相机等权限后,重新进入直播间',
					showCancel: false,
					success: ({
						confirm
					}) => {
						if (confirm) permision.gotoAppPermissionSetting()
					}
				})
			},
			back() {
				uni.navigateBack({
					delta: 1
				})
			},
			refreshToken() {},
			// netWork
			share() {
				uni.showLoading({
					title: '请稍等'
				})
				uni.share({
					provider: "weixin",
					type: 0,
					imageUrl: decodeURIComponent(this.liveData.cover),
					title: "拆卡进行中！",
					summary: '拆卡进行中！',
					scene: "WXSceneSession",
					href: 'https://www.ka-world.com/share/h5/#/pages/live/liveShare?roomID=' + this.loginRoomData
						.roomID,
					success: (res) => {},
					fail: (err) => {
						console.log("失败原因=>", err);
						uni.showToast({
							title: "分享失败",
							icon: "none"
						});
					},
					complete: (res) => {
						uni.hideLoading()

					}
				});
			},
			loginError(err) {
				// uni.showToast({
				// 	title: '房间进入失败',
				// 	icon: 'none'
				// })
				// console.log();
			},
			pageJump(url, type = 'navigateTo') {
				uni[type]({
					url
				})
			},
			handleMessage(event) {
				//接收webViewPostMessage
				const {
					data
				} = event.detail
				const resData = data[0]
				const paramsIsArray = resData.params instanceof Array
				paramsIsArray && resData.isArguments ? this[resData.action](...resData.params) : this[resData.action](
					resData.params)
			}
		}
	}
</script>

<style>
	.full {
		/* background-color: black; */
		position: fixed;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		overflow: hidden;
	}

	.webView {
		position: fixed;
	}

	.envelope {
		width: 100rpx;
		height: 100rpx;
		background: red;
		position: absolute;
		bottom: -110rpx;
	}

	.envelopeModal {
		width: 750rpx;
		height: 400rpx;
		top: 340rpx;
		position: fixed;
		justify-content: center;
		align-items: center;
		transition-property: transform;
		transition-duration: 0.3s;
		transition-delay: 0s;
		transition-timing-function: ease;
		transform: scale(0)
	}

	.envelopeModalShow {
		transform: scale(1)
	}

	.envelopeModal-pack {
		width: 300rpx;
		height: 400rpx;
		background: red;
	}

	/* ------------商品信息-------------- */
	.goodsDetail {
		background-color: #fff;
		height: 900rpx;
		bottom: 0;
		align-items: stretch;
		padding: 20rpx;
	}

	.goodsBlock {
		width: 750rpx;
		flex-direction: row;
		align-items: center;
	}

	.goodsImageBlock {
		width: 250rpx;
		height: 250rpx;
	}

	.goodsImage {
		position: absolute;
		top: 0;
		width: 250rpx;
		height: 250rpx;
	}

	.goodsState {
		width: 250rpx;
		height: 40rpx;
		text-align: center;
		font-size: 24rpx;
		color: #fff;
		line-height: 40rpx;
		position: absolute;
		bottom: 0;
		background-color: rgba(255, 64, 77, .8);
	}

	/* -----------------------卡密--------------- */
	.card {
		background-color: #fff;
		height: 800rpx;
		align-items: center;
		font-size: 22rpx;
		padding-top: 30rpx;
	}

	.card-title {
		width: 750rpx;
		flex-direction: row;
		align-items: center;
		position: relative;
		margin-bottom: 10rpx;
		justify-content: center;
	}

	.card-title-text {
		text-align: center;
		font-size: 28rpx;
	}

	.card-title-img {
		width: 30rpx;
		height: 30rpx;
		position: absolute;
		right: 50rpx;
	}

	.safe {
		background: #000000;
		width: 750rpx;
	}

	.card-scroll {
		height: 670rpx;
	}

	.card-index {
		width: 690rpx;
		/* box-sizing: border-box; */
		display: flex;
		align-items: center;
		justify-content: space-between;
		background: #fff;
		margin-top: 20rpx;
		/* flex-dr */
		flex-direction: row;
		font-size: 22rpx;

	}

	/* ----------------------------------- */


	.card-left {
		width: 660rpx;

		background: #F6F7F8;
		padding: 10rpx 20rpx;
	}

	.card-left-text {
		font-weight: 400;
		font-size: 22rpx;
	}

	.card-right {
		width: 86rpx;
		display: flex;
		align-items: center;
		justify-content: center;
		text-align: center;
		font-size: 21rpx;
		font-family: Source Han Sans CN;
		font-weight: 400;
		color: #fff;
		background: #CCCCCC;
	}
</style>
