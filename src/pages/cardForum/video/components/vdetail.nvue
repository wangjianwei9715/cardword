<template>
	<!-- 底部详情 -->
	<view class="vd-box">
		<text class="vd-title" v-if="articleData.title">{{ articleData.title }}</text>
		<view class="vd-user" v-if="articleData">
			<image class="vd-avatar" :src="decodeURIComponent(articleData.avatar)" />
			<view>
				<text class="vd-name_zuozhe">{{ articleData.userName }}</text>
				<text class="vd-time">发布于{{ timeFormat(articleData.created_at) }} IP属地:{{ articleData.location || "未知"
				}}</text>
			</view>
		</view>
		<template v-if="articleData.content">
			<text class="vd-desc" v-for="(item, index) in replaceText(decodeURIComponent(articleData.content))"
				:key="index">{{
					item }}</text>
		</template>
		<!-- <template v-if="articleData.topic && articleData.topic.length">

		</template> -->
		<view class="topicsContainer" v-if="articleData.topic && articleData.topic.length">
			<text @click="pageJump(`/pages/cardForum/topics/detail?id=${item.topicId}`)" class="topicsItem" v-for="item in articleData.topic">{{ item.topicName }}</text>
		</view>
		<view class="haowuGoodsWrap" v-if="articleData.good && articleData.good.goodCode"
			@click="app.navigateTo.goGoodsDetails(articleData.good.goodCode)">
			<view class="goodsItem flexCenter">
				<image class="goodsPic" mode="aspectFill" :src="parsePic(decodeURIComponent(articleData.good.cover))">
				</image>
				<text class="goodsInfo u-line-2">{{ articleData.good.title }}</text>
			</view>
		</view>

		<u-divider style="width:100%" lineColor="#E8E8E8"></u-divider>
		<view class="voteContainer" v-if="articleData.vote && articleData.vote.voteTitle">
			<text class="voteTitle">投票：{{ articleData.vote.voteTitle }}</text>
			<!--  -->
			<view class="voteOption" v-for="(item, index) in articleData.vote.options" @click="onClickVote(item)">
				<view class="voteGray" :style="{ width: (item.poll / voteTotal) * voteWidth + 'px' }"
					:class="{ voteGray_select: articleData.vote.myOption === item.optionId }"></view>
				<text class="voteFont" :class="{ voteFont_select: articleData.vote.myOption === item.optionId }">{{
					item.content }}
				</text>
				<text class="voteNum" v-if="articleData.vote.myOption"
					:class="{ voteFont_select: articleData.vote.myOption === item.optionId }">{{ item.poll }}
				</text>
			</view>
		</view>
		<view class="chat-content" v-if="articleData.commentNum > 0">
			<text class="chat-header">{{ articleData.commentNum }}条评论</text>
			<list style="padding-bottom:120px;margin-top:20rpx" :show-scrollbar="false" ref="commentBox"
				:pagingEnabled="false" :scrollable="true">
				<cell v-for="(item, index) in commentsList" :key="index">
					<view class="chat-item" @click="onClickReply(item, item.id)" @touchstart="touchAction($event, item)"
						@touchend="touchAction($event, item)">
						<image class="chat-avatar"
							:src="item.avatar && item.avatar != '' ? decodeURIComponent(item.avatar) : defaultAvatar" />
						<view style="width:470rpx">
							<view class="chat-info">
								<text class="chat-name">{{ item.userName }}</text>
								<text class="chat-time">{{ timeFrom(item.created_at) }}</text>
							</view>
							<text class="chat-msg" :selectable="true" :class="'chat-' + item.id">{{ item.content }}</text>
						</view>
						<view class="chat-right" @click="onClickLike(item)">
							<image style="width:22rpx;height:22rpx" v-if="item.isLike"
								src="@/static/information/icon_m_liked.png"></image>
							<image style="width:22rpx;height:22rpx" v-else src="@/static/information/icon_m_like.png">
							</image>
							<text class="chat-like">{{ item.likeNum }}</text>
						</view>
					</view>
					<view class="chat-item son-item" v-for="(son, x) in item.lower" :key="x"
						@touchstart="touchAction($event, son)" @touchend="touchAction($event, son)">
						<image class="son-avatar"
							:src="son.avatar && son.avatar != '' ? decodeURIComponent(son.avatar) : defaultAvatar" />
						<view style="width:390rpx">
							<view class="chat-info son-info">
								<text class="chat-name">{{ son.userName }}</text>
								<text class="chat-time">{{ timeFrom(son.created_at) }}</text>
							</view>
							<view style="width:390rpx" class="chat-msg" v-if="!son.isDelete">
								<!-- <rich-text :nodes="richNodes(son)" :selectable="false" v-if="son.replyUserName!=''"></rich-text> -->
								<text class="chat-hf" :selectable="true" v-if="son.replyUserName != '' && platform == 'ios'"
									@click="onClickReply(son, item.id)">
									回复 {{ son.replyUserName }} {{ son.content }}
								</text>
								<text class="chat-hf" :selectable="true" v-else-if="son.replyUserName != ''"
									@click="onClickReply(son, item.id)">
									回复 {{ son.replyUserName }} {{ son.content }}
								</text>
								<text class="chat-hf" :selectable="true" v-else @click="onClickReply(son, item.id)">{{
									son.content }}</text>
							</view>
							<text style="width:390rpx" class="chat-msg" v-else>评论已删除</text>
						</view>
						<view class="chat-right" @click="onClickLike(son)">
							<image style="width:22rpx;height:22rpx" v-if="son.isLike"
								src="@/static/information/icon_m_liked.png"></image>
							<image style="width:22rpx;height:22rpx" v-else src="@/static/information/icon_m_like.png">
							</image>
							<text class="chat-like">{{ son.likeNum }}</text>
						</view>
					</view>
					<view class="chat-more" v-if="item.remainNum > 0" @click="onClickMoreComments(item.id)">
						<text class="more-text">展开{{ item.remainNum }}条</text>
						<image style="width:16rpx;height:11rpx;margin-left:8rpx" src="@/static/information/icon_down.png" />
					</view>
				</cell>
			</list>
		</view>
		<view class="chat-empty" v-if="articleData.comment > 0 && isFetchEnd">- 没有更多了 -</view>
		<slot></slot>
	</view>
</template>
<script>
const app = getApp().globalData.app;
const commentParams = {
	fetchFrom: 1,
	fetchSize: 10,
	isFetchEnd: false
}
export default {
	props: {
		articleData: {
			type: Object,
			default: () => {
				return {};
			}
		},
	},
	watch: {
		"articleData.code": function (val) {
			this.getDetail(val)
			this.getArticleComment();
		}
	},
	computed: {
		voteTotal() {
			if (!this.articleData?.vote?.myOption) return 0
			let total = 0
			this.articleData.vote.options.forEach((item => {
				total += item.poll
			}))
			return total
		}
	},
	data() {
		return {
			defaultAvatar: app.defaultAvatar,
			platform: '',
		};
	},
	mounted() {
		this.defaultAvatar = app.defaultAvatar;
		this.platform = uni.getSystemInfoSync().platform;
		this.commentsList = []
		this.commentParams = { ...commentParams }

		uni.$on('commentChange', (r) => {
			const data = r.data;
			console.log("datadatadata", data);
			// const res = r.res
			if (!data.replyId) {
				// console.log(res.data);
				this.commentsList.unshift(data)
			} else {
				let findItem = this.commentsList.find((item) => {
					return item.id == data.fatherId;
				});
				findItem.lower.unshift(data)
			}
		})
		uni.$on('comloadmore', () => {
			this.getArticleComment()
		})
	},
	beforeDestroy() {
		uni.$off('commentChange');
		uni.$off('comloadmore');
	},
	data() {
		return {
			voteWidth: uni.upx2px(670),
			commentsList: [],
			commentParams: { ...commentParams },
			touchId: 0,
			tapTimer: null,
			lontapTimer: null,
			comment_reason_tp: [{
				label: "站外导流",
				value: 1
			},
			{
				label: "违法违规",
				value: 2
			},
			{
				label: "色情低俗",
				value: 3
			},
			{
				label: "广告",
				value: 4
			},
			{
				label: "不友善、引战",
				value: 5
			},
			{
				label: "时政不实信息",
				value: 6
			},
			{
				label: "涉未成年人",
				value: 7
			},
			{
				label: "内容不相关",
				value: 8
			},
			{
				label: "其他",
				value: 100
			}],
		};
	},
	methods: {
		stop() { },
		richNodes(item) {
			return [{
				children: [
					{
						type: 'text',
						attrs: { class: 'chat-text' },
						text: '回复 '
					},
					{
						type: 'text',
						attrs: { class: 'hf-name' },
						text: item.replyUserName
					},
					{
						type: 'text',
						attrs: { class: 'chat-text' },
						text: ' ：' + item.content
					}
				]
			}]
		},
		onClickVote(item) {
			if (this.articleData.vote.myOption) return
			app.http.Post("cardCircle/user/vote/" + this.articleData.code, { optionId: item.optionId }, () => {
				this.articleData.vote.myOption = item.optionId
				item.poll += 1
			})

		},
		replaceText(text) {
			const msg = text.replace(/\<p\>/g, '').split('</p>');
			return msg
		},
		timeFormat(time) {
			return uni.$u.timeFormat(time, 'mm月dd日 hh:MM')
		},
		timeFrom(time) {
			return uni.$u.timeFrom(time)
		},
		getDetail(code) {
			if (this.articleData.bit == undefined) {
				app.http.Get("cardCircle/detail/" + code, {}, (res) => {
					console.log(res);
				})
			}

		},
		pageJump(url){
			uni.navigateTo({
				url
			})
		},
		onClickLike(item) {
			uni.$u.throttle(() => {
				app.platform.hasLoginToken(() => {
					app.http.Post(`article/comment/like/or/cancel/${item.id}`, {}, (res) => {
						item.isLike = res.liked;
						item.likes = res.likes;
					})
				})
			}, 100)
		},
		onClickReply(item, fatherId) {
			console.log('------------------');
			uni.$u.throttle(() => {
				this.$emit('reply', { replyId: item.id, replyName: item.name, fatherId })
			}, 1000)
		},
		parsePic(path) {
			return getApp().globalData.parsePic(path)
		},
		onClickMoreComments(id) {
			const findItem = this.commentsList.find((item) => {
				return item.id == id;
			})
			const params = {
				fetchFrom: findItem.fetchFrom ? findItem.fetchFrom : 1,
				fetchSize: 10
			}
			console.log(`dataApi/cardCircle/comment/more/${id}`, params);
			app.http.Get(`dataApi/cardCircle/comment/more/${id}`, params, (res) => {
				findItem.lower.push(...res.list || []);
				findItem.remainNum = res.remainNum;
				findItem.fetchFrom = params.fetchFrom + params.fetchSize;
			})
		},
		// 获取资讯评论
		getArticleComment() {
			const { commentParams } = this;
			if (commentParams.isFetchEnd) {
				return;
			}
			console.log(this.articleData);
			app.http.Get(`dataApi/cardCircle/comment/list/${this.articleData.code}`, commentParams, (res) => {
				if (res.list) {
					this.commentsList = commentParams.fetchFrom == 1 ? res.list : [...this.commentsList, ...res.list];
				}
				commentParams.isFetchEnd = res.isFetchEnd;
				commentParams.fetchFrom += commentParams.fetchSize
				uni.$emit('resetLoadmore')
			})
		},
		touchAction(event, item) {
			if (item.id != this.touchId && this.touchId != 0) return
			this.tapTimer && clearTimeout(this.tapTimer)
			if (event.type == 'touchend') {
				this.lontapTimer && clearTimeout(this.lontapTimer)
				this.touchId = 0
				// this.onClickTap = false
				return
			}
			if (event.type == "touchstart") {
				this.lontapTimer && clearTimeout(this.lontapTimer)
				this.lontapTimer = setTimeout(() => {
					console.log("按住了0.7s");
					// if (item.host || this.isMy) this.longtapCom(item, fatherItem, index, isSon) 
					this.longtapCom(item)
				}, 700)
				this.tapTimer = setTimeout(() => {
					// this.onClickTap = true
					this.touchId = item.id
					return
				}, 200)
			}

		},
		longtapCom(item) {
			this.touchId = item.id
			let buttons = [
				{
					title: "举报"
				}
			]
			//#ifdef APP-PLUS
			app.platform.UIClickFeedBack()
			plus.nativeUI.actionSheet(
				{
					cancel: "取消",
					buttons,
				},
				(e) => {
					this.touchId = 0
					if (e.index == 0) return
					const title = buttons[e.index - 1].title
					if (title == "举报") {
						this.pickUpActionSheet(item)
					}
				}
			);
			//#endif
		},
		pickUpActionSheet(item) {
			//#ifdef APP-PLUS
			plus.nativeUI.actionSheet({
				cancel: "取消",
				buttons: this.comment_reason_tp.map((item) => {
					return {
						title: item.label
					}
				})
			}, (e) => {
				if (e.index == 0) return
				const value = this.comment_reason_tp[e.index - 1].value
				if (!value || !item.id) {
					uni.showToast({
						title: "举报失败",
						icon: "none"
					})
					return
				}
				app.http.Post("comment/report/" + item.id, { tp: 1, reason_tp: value }, (res) => {
					uni.showToast({
						title: "举报成功",
						icon: "none"
					})
				})
			})
			//#endif
		}
	}
};
</script>

<style lang="scss">
.vd-box {
	width: 670rpx;
}

.vd-title {
	width: 670rpx;
	font-size: 38rpx;
	
	font-weight: bold;
	color: #333333;
	line-height: 48rpx;
	margin-top: 20rpx;
	// margin-bottom: 20rpx;
}

.vd-user {
	width: 670rpx;
	display: flex;
	align-items: center;
	flex-direction: row;
	height: 90rpx;
	margin-bottom: 30rpx;
}

.vd-avatar {
	width: 90rpx;
	height: 90rpx;
	border-radius: 50%;
	margin-right: 28rpx;
}

.vd-name {
	width: 670rpx;
	font-size: 29rpx;
	
	font-weight: bold;
	color: #333333;
	margin-bottom: 5rpx;
}

.vd-time {
	width: 670rpx;
	font-size: 23rpx;
	
	font-weight: 400;
	color: #7C7C7C;
}

.vd-desc {
	width: 670rpx;
	font-size: 28rpx;
	
	font-weight: 400;
	color: #14151A;
	line-height: 36rpx;
}

.chat-content {
	width: 670rpx;
}

.chat-header {
	width: 670rpx;
	font-size: 29rpx;
	
	font-weight: bold;
	color: #333333;
}

.chat-item {
	width: 670rpx;
	position: relative;
	display: flex;
	flex-direction: row;
	margin-bottom: 20rpx;
}

.chat-avatar {
	width: 62rpx;
	height: 62rpx;
	margin-right: 18rpx;
	border-radius: 50%;
}

.chat-info {
	width: 470rpx;
	display: flex;
	align-items: center;
	justify-content: flex-start;
	flex-direction: row;
	padding-top: 10rpx;
}

.chat-name {
	font-size: 25rpx;
	
	font-weight: 400;
	color: #949494;
	margin-right: 22rpx;
}

.chat-time {
	font-size: 21rpx;
	
	font-weight: 400;
	color: #AAAAAA;
}

.chat-msg {
	width: 470rpx;
	font-size: 25rpx;
	
	font-weight: 400;
	color: #333333;
	line-height: 33rpx;
	margin-top: 10rpx;
	display: flex;
}

.chat-right {
	height: 30rpx;
	display: flex;
	align-items: center;
	flex-direction: row;
	position: absolute;
	right: 0;
	top: 9rpx;
}

.chat-like {
	height: 30rpx;
	line-height: 30rpx;
	font-size: 21rpx;
	
	font-weight: 400;
	color: #AAAAAA;
	margin-left: 12rpx;
}

.son-item {
	padding-left: 80rpx;
}

.son-avatar {
	width: 44rpx;
	height: 44rpx;
	margin-right: 17rpx;
	border-radius: 50%;
}

.son-info {
	width: 390rpx;
	padding-top: 5rpx !important;
}

.chat-hf {
	width: 390rpx;
	font-size: 25rpx;
	
	font-weight: 400;
	color: #333333;
	line-height: 33rpx;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	flex: 1
}

.chat-text {
	font-size: 25rpx;
	
	font-weight: 400;
	color: #333333;
	line-height: 33rpx;
}

.chat-text2 {
	width: 390rpx;
	font-size: 25rpx;
	
	font-weight: 400;
	color: #333333;
	line-height: 33rpx;
}

.hf-name {
	color: #636363;
	font-size: 25rpx;
	
	font-weight: 400;
	line-height: 33rpx;
	margin-left: 10rpx;
	margin-right: 10rpx;
}

.chat-more {
	width: 200rpx;
	margin-left: 140rpx;
	height: 41rpx;
	background: #EFEFEF;
	border-radius: 3rpx;
	padding: 0 15rpx;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: row;
	margin-bottom: 20rpx
}

.more-text {
	height: 41rpx;
	line-height: 41rpx;
	font-size: 21rpx;
	
	font-weight: 600;
	color: #636363;
}

.vd-user {
	width: 670rpx;
	display: flex;
	align-items: center;
	flex-direction: row;
	height: 130rpx;
	margin-bottom: 40rpx;
	padding-top: 40rpx;
}

.vd-avatar {
	width: 90rpx;
	height: 90rpx;
	border-radius: 50%;
	margin-right: 28rpx;
}

.vd-name_zuozhe {
	width: 670rpx;
	font-size: 29rpx;
	
	font-weight: bold;
	color: #333333;
	margin-bottom: 5rpx;
}

.vd-time {
	width: 670rpx;
	font-size: 23rpx;
	
	font-weight: 400;
	color: #7C7C7C;
}

.topicsContainer {
	width: 670rpx;
	// box-sizing: border-box;

	// // padding: 0 20rpx;

}

.topicsItem {
	margin-right: 10rpx;
	font-size: 33rpx;
	
	font-weight: bold;
	color: #333333;
	line-height: 42rpx;
	color: #1E46A1;
}

.haowuGoodsWrap {
	width: 670rpx;
	height: 103rpx;
	margin-top: 26rpx;


}

.goodsItem {
	width: 401rpx;
	height: 97rpx;
	border: 1rpx solid rgba(149, 150, 149, .6);
	background-color: #ffffff;
	border-radius: 3px;
	// #ifndef APP-NVUE
	box-sizing: border-box;
	// #endif 
	padding: 10rpx;
	align-items: center;
	display: flex;
	flex-direction: row;


}

.goodsPic {
	width: 102rpx;
	height: 79rpx;
	// background: #FA1545;
	border-radius: 1rpx;
	margin-right: 12rpx;
}

.goodsInfo {
	font-size: 22rpx;
	
	font-weight: 600;
	color: #333333;
	line-height: 25rpx;
	flex: 1;
	// display: flex;
}

.voteContainer {
	margin-top: 33rpx;


}

.voteTitle {
	font-size: 29rpx;
	
	font-weight: 400;
	color: #333333;
	line-height: 25rpx;
	margin-bottom: 26rpx;
}

.voteOption {
	width: 670rpx;
	height: 66rpx;
	background: #F5F5F5;
	border-radius: 3rpx;
	display: flex;
	align-items: center;
	// #ifndef APP-NVUE
	box-sizing: border-box;
	// #endif 
	padding: 0 30rpx;
	position: relative;
	margin-bottom: 15rpx;
	overflow: hidden;
	flex-direction: row;

}

.voteFont {
	font-size: 25rpx;
	
	font-weight: 400;
	color: #333333;
	flex: 1;
	z-index: 4;
}

.voteNum {
	font-size: 23rpx;
	
	font-weight: bold;
	color: #333333;
	z-index: 4;
}

.voteFont_select {
	color: #FA1545;
}

.voteNum_select {
	color: #FA1545;
}

.voteGray {
	z-index: 2;
	width: 0px;
	height: 66rpx;
	position: absolute;
	left: 0;
	top: 0;
	background-color: #E6E6E6;
	// transition: width 0.6s;
	transition-property: width;
	transition-duration: 0.6s;
}

.voteGray_select {
	background-color: #FFE8E8;
}
</style>
