<template>
    <!-- <div class="popContainer" :style="{ height: fullHeight + 'px' }">

    </div> -->
    <u-overlay :show="show" @click="$emit('update:show', !show)">
        <!-- <div class="popWrap" ref="popWrap"></div> -->
        <u-popup :show="show" :safeAreaInsetBottom="false" round="20rpx">
            <!-- #ifndef APP-NVUE -->
            <scroll-view class="wrap" scroll-y="true">
                <!-- #endif -->
                <!-- #ifdef APP-NVUE -->
                <list class="wrap" @loadmore="loadmoreComm">
                    <!-- #endif -->
                    <!-- #ifdef APP-NVUE -->
                    <cell>
                        <!-- #endif -->
                        <view class="vd-user">
                            <image class="vd-avatar" @click="onClickUserAvatar"
                                :src="forumDetail.avatar ? parsePic(decodeURIComponent(forumDetail.avatar)) : defaultAvatar"
                                mode="aspectFill">
                            </image>
                            <view>
                                <text class="vd-name">{{ forumDetail.userName }}</text>
                                <text class="vd-time">发布于{{ timeFormat(forumDetail.created_at) }} IP属地:{{
                                    forumDetail.location
                                    ||
                                    "未知"
                                }}</text>
                            </view>
                        </view>
                        <text class="vd-title">{{ forumDetail.title }}</text>
                        <view v-if="forumDetail.content" style="margin-bottom: 16rpx;">
                            <text class="vd-desc"
                                v-for="(item, index) in replaceText(decodeURIComponent(forumDetail.content))"
                                :key="index">{{
                                    item }}</text>
                        </view>
                        <view class="topicsContainer"
                            v-if="(forumDetail.topic && forumDetail.topic.length) || (forumDetail.merAt && forumDetail.merAt.length)">
                            <text @click="pageJump(`/pages/cardForum/topics/detail?id=${item.topicId}`)" class="topicsItem"
                                v-for="item in forumDetail.topic">{{ item.topicName }}</text>
                            <text v-for="item in (forumDetail.merAt || [])"
                                @click.stop="pageJump(`/pages/merchant/core?alias=${item.alias}`)">@{{ item.merName
                                }}</text>
                        </view>
                        <view class="haowuGoodsWrap" v-if="forumDetail.good && forumDetail.good.goodCode"
                            @click="app.navigateTo.goGoodsDetails(forumDetail.good.goodCode)">
                            <view class="goodsItem flexCenter">
                                <image class="goodsPic" mode="aspectFill"
                                    :src="parsePic(decodeURIComponent(forumDetail.good.cover))">
                                </image>
                                <text class="goodsInfo u-line-2">{{ forumDetail.good.title }}</text>
                            </view>
                        </view>
                        <u-divider style="width:670rpx"></u-divider>
                        <view class="voteContainer" v-if="forumDetail.vote && forumDetail.vote.voteTitle">
                            <text class="voteTitle">投票：{{ forumDetail.vote.voteTitle }}</text>
                            <view class="voteOption" v-for="(item, index) in forumDetail.vote.options"
                                @click="onClickVote(item)">
                                <view class="voteGray" :style="{ width: (item.poll / voteTotal) * voteWidth + 'px' }"
                                    :class="{ voteGray_select: forumDetail.vote.myOption === item.optionId }"></view>
                                <text class="voteFont"
                                    :class="{ voteFont_select: forumDetail.vote.myOption === item.optionId }">{{
                                        item.content }}
                                </text>
                                <text class="voteNum" v-if="forumDetail.vote.myOption"
                                    :class="{ voteFont_select: forumDetail.vote.myOption === item.optionId }">{{ item.poll
                                    }}
                                </text>
                            </view>
                            <u-divider style="width:670rpx"></u-divider>
                        </view>
                        <view class="comTop">
                            <text class="commentNum">{{ forumDetail.commentNum || 0 }}条评论</text>
                            <!-- <view class="tips">*请勿在评论区泄露您的个人信息以及交易信息</view> -->
                        </view>
                        <!-- @touchstart="touchAction($event, item, {}, index, false)"
                        @touchend="touchAction($event, item, {}, index, false)" -->
                        <view class="comWrap" v-for="(item, index) in commList">
                            <view class="comBlock" :id="`commId_${item.id}`" :class="{
                                heightLight_an: queryParams.noteCommentId && item.id == queryParams.noteCommentId && isScrollEnd,
                                hold: onClickTap && touchId == item.id
                            }">
                                <image class="com_avatar"
                                    :src="item.avatar ? parsePic(decodeURIComponent(item.avatar)) : app.defaultAvatar"
                                    borderRadius="50%" @click="app.navigateTo.goPersonHome(item.userId)"/>
                                <view class="rightWrap">
                                    <view class="msgInfo">
                                        <view class="msgInfo_top">
                                            <text class="name" style="max-width: 350rpx;" @click="app.navigateTo.goPersonHome(item.userId)">{{ item.userName }}
                                            </text>
                                            <image class="medal-icon" v-if="item.medal&&item.medal.pic" :src="item.medal.pic" @click="onClickIcon(item.userId)"></image>
                                            <!-- <text class="time">{{ timeFrom(item.created_at * 1000) }}</text> -->
                                            <!-- <view style="display: flex;align-items: center;flex-direction: row;">
                                                <text class="dz" :class="{ dzs: item.isLiked }"></text>
                                                <text class="num">{{ formatNumber(item.likeNum, 2, "en") }}</text>
                                            </view> -->
                                        </view>
                                        <view class="contentInfo" style="width:530rpx" @click.stop="onClickCom($event, item, null)">
                                            <text class="contentMsg">{{ item.content }}</text>
                                        </view>
                                        <view class="timeInfo">
                                            <text class="time">{{ timeFrom(item.created_at * 1000) }}</text>
                                            <text class="loaction">{{ item.location || "未知" }}</text>
                                            <text class="reply_text">回复</text>
                                        </view>
                                    </view>
                                </view>
                            </view>
                            <!-- @touchstart.stop="touchAction($event, son, item, sonIndex, true)"
                            @touchend.stop="touchAction($event, son, item, sonIndex, true)"
                            @click.stop="onClickCom(item, son)" -->
                            <view :id="`commId_${son.id}`" class="comBlock comBlock_son"
                                v-for="(son, sonIndex) in item.lower" :class="{
                                    heightLight_an: queryParams.noteCommentId && son.id == queryParams.noteCommentId && isScrollEnd,
                                    hold: onClickTap && touchId == son.id
                                }" >
                                <image class="com_avatar com_avatar_son"
                                    :src="son.avatar ? parsePic(decodeURIComponent(son.avatar)) : app.defaultAvatar"
                                    borderRadius="50%" @click="app.navigateTo.goPersonHome(son.userId)"/>
                                <view class="rightWrap">
                                    <view class="msgInfo">
                                        <view class="msgInfo_top">
                                            <text class="name" style="max-width: 350rpx;" @click="app.navigateTo.goPersonHome(son.userId)">{{ son.userName }}</text>
                                            <image class="medal-icon" v-if="son.medal&&son.medal.pic" :src="son.medal.pic" @click="onClickIcon(son.userId)"></image>
                                            <!-- <text class="time">{{ timeFrom(son.created_at * 1000) }}</text> -->
                                            <!-- <view style="display: flex;align-items: center;flex-direction: row;">
                                                <text class="dz" :class="{ dzs: son.isLiked }"></text>
                                                <text class="num">{{ formatNumber(son.likeNum, 2, "en") }}</text>
                                            </view> -->
                                        </view>
                                        <view class="sonReply" style="width: 480rpx;" @click.stop="onClickCom($event, item, son)">
                                            <text class="contentMsg" v-if="son.replyUserName">回复</text>
                                            <text class="replayUserName" v-if="son.replyUserName"> {{ son.replyUserName }}
                                            </text>
                                            <text class="contentMsg">{{ son.content }}</text>
                                        </view>
                                        <view class="timeInfo">
                                            <text class="time">{{ timeFrom(item.created_at * 1000) }}</text>
                                            <text class="loaction">{{ item.location || "未知" }}</text>
                                            <text class="reply_text">回复</text>
                                        </view>
                                        <!-- <text class="contentMsg">
                                            <template v-if="son.replyUserName">
                                                回复
                                                <text class="replyName">{{ son.replyUserName }}</text>
                                            </template>
                                            {{ son.content }}
                                        </text> -->
                                    </view>
                                </view>
                            </view>
                            <view class="loadMore" v-if="item.remainNum && item.remainNum > 0">
                                <view class="loadMore_wrap" v-if="!item.loading" @click="onClickLoadMore(item)">
                                    <!-- <template v-if="item.queryParams.fetchFrom == -9">
                                        <text class="loadMore_text">展开{{ item.remainNum }}条评论</text>
                                        <image style="width:16rpx;height:11rpx;margin-left:8rpx"
                                            src="@/static/information/icon_down.png" />
                                    </template> -->
                                    <template>
                                        <text class="loadMore_text">展开更多</text>
                                        <image style="width:16rpx;height:11rpx;margin-left:8rpx"
                                            src="@/static/information/icon_down.png" />
                                    </template>
                                </view>
                                <u-loading-icon mode="circle" color="#ff013d" style="position: relative;right:60rpx"
                                    v-if="item.loading"></u-loading-icon>
                            </view>
                            <view class="line" v-if="index + 1 < commList.length"></view>
                        </view>
                        <view class="bottomArea" :style="{ height: ((deleteHeight / 2) + safeHeight + 20) + 'px' }"></view>
                        <!-- #ifdef APP-NVUE -->
                    </cell>
                    <!-- #endif -->
                    <!-- #ifdef APP-NVUE -->
                </list>
                <!-- #endif -->
                <!-- #ifndef APP-NVUE -->
            </scroll-view>
            <!-- #endif -->
            <nTabbar v-if="show" :isSon="true" :data="forumDetail ? forumDetail : {}" :deleteHeight="deleteHeight / 2"
                :detail="true" @comment="inputShow"></nTabbar>
            <u-overlay :show="focus" :eventPenetrationEnabled="!focus" @click="inputHide">
                <view class="trueFixInput" :class="{ opacity: keyBoardHeigh > 0 ? 1 : 0 }"
                    :style="{ transform: `translateY(-${keyBoardHeigh}px)` }">
                    <textarea confirm-type="send" ref="fixInput" class="input" type="text" :placeholder="inputPlaceholder"
                        :focus="focus" :adjust-position="false" :auto-height="true" :maxlength="-1" :auto-blur="true"
                        v-model="sayContent"></textarea>
                    <!--   -->
                    <text class="send flexCenter" @click.stop="sendCom">发送</text>
                </view>
            </u-overlay>
        </u-popup>
    </u-overlay>
</template>
<script>
// #ifdef APP-NVUE
const dom = weex.requireModule('dom')
const animation = uni.requireNativePlugin('animation')
// #endif
const app = getApp().globalData.app
import nTabbar from "./nTabbar.nvue"
import { getForumDetail } from "@/pages/cardForum/func/index.js"
const queryParams = {
    fetchFrom: 1,
    fetchSize: 10
}
export default {
    name: '',
    components: {
        nTabbar
    },
    mixins: [],
    props: {
        show: {
            type: Boolean,
            default: false
        },
        forumDetail: {
            tpye: Object,
            default: () => {
                return {}
            }
        }
    },
    data() {
        return {
            app,
            defaultAvatar: app.defaultAvatar,
            sayContent: "",
            focus: false,
            queryParams,
            safeHeight: uni.upx2px(124),
            voteWidth: uni.upx2px(670),
            show: true,
            fullHeight: uni.getSystemInfoSync().screenHeight,
            commList: [],
            deleteHeight: plus.navigator.getSafeAreaInsets().deviceBottom || 0,
            keyBoardHeigh: -2,
            clickCom: {},
            clickSon: {},
            onClickTap: false,
            touchId: 0,
            userInfo: {}
        }
    },
    computed: {
        voteTotal() {
            if (!this.forumDetail?.vote?.myOption) return 0
            let total = 0
            this.forumDetail.vote.options.forEach((item => {
                total += item.poll
            }))
            return total
        },
        inputPlaceholder() {
            if (this.clickCom.id) {
                return `回复 ${this.clickSon.userName || this.clickCom.userName}`
            }
            return "说点什么..."
        }
    },
    watch: {
        "forumDetail.code": function (val) {
            this.commList = []
            this.queryParams.fetchFrom = 1
        },
        show: function (val) {
            if (val) {
                if (!this.forumDetail.hasDetail) this.getDetail()
                if (!this.commList.length) this.getCommByWorks()
            }
        }
    },
    mounted() {
        // setTimeout(() => {
        //     animation.transition(this.$refs.popWrap, {
        //         styles: {
        //             transform: `translateY(0)`
        //         },
        //         duration: 300, //ms
        //         timingFunction: "ease-in"
        //     })
        // }, 1000)
    },
    methods: {
        onClickIcon(userId){
            userId && app.navigateTo.goMedalIndex(userId)
        },
        onClickUserAvatar(event) {
            // #ifdef APP-NVUE
            event.stopPropagation();
            // #endif
            uni.navigateTo({
                url: `/pages/cardForum/personHomePage?userId=${this.forumDetail.userId}&isMine=${(this.forumDetail.bit & 1) == 1 ? 1 : 0}`
            })
        },
        replaceText(text) {
            const msg = text.replace(/\<p\>/g, '').split('</p>');
            console.log(msg);
            return msg
        },
        parsePic(path) {
            return getApp().globalData.parsePic(path)
        },
        timeFormat(time) {
            return uni.$u.timeFormat(time, 'mm月dd日 hh:MM')
        },
        formatNumber(...args) {
            return getApp().globalData.formatNumber(...args)
        },
        keyBoardHeightChange(obj) {
            console.log("keyHeight:", obj);
            if (obj.height <= 0) this.focus = false
            this.keyBoardHeigh = obj.height
            console.log(this.keyBoardHeigh);
        },
        onClickVote(item) {
            if (this.forumDetail.vote.myOption) return
            app.http.Post("cardCircle/user/vote/" + this.forumDetail.code, { optionId: item.optionId }, () => {
                this.forumDetail.vote.myOption = item.optionId
                item.poll += 1
            })

        },
        inputHide() {
            this.clearClickCom()
            this.focus = false
            this.keyBoardHeigh = 0
            //#ifdef H5
            this.keyBoardHeigh = -2
            //#endif
        },
        inputShow() {
            app.platform.hasLoginToken(async () => {
                if (!this.userInfo.userId) {
                    this.userInfo = await app.user.getUserInfo()
                }
                this.focus = true
            })

            // setTimeout(() => {
            //     console.log("this.$refs.fixInput",this.$refs.fixInput);
            //     this.$refs.fixInput && this.$refs.fixInput.focus()
            // }, 100)
            //#ifdef H5
            // this.keyBoardHeigh = 340
            //#endif
        },
        clearClickCom() {
            if (this.sayContent == "") {
                this.clickCom = {}
                this.clickSon = {}
            }
        },
        onClickCom(event, item, son) {
            console.log(item, son);
            // #ifdef APP-NVUE
            event.stopPropagation();
            // #endif
            if (this.onClickTap || this.touchId) return
            this.focus = true
            if (!item.id) return
            if (son && (item.id != this.clickCom.id || son.id != this.clickSon.id)) {
                this.sayContent = ""
            }
            this.clickCom = item
            this.clickSon = son ?? {}
            this.inputShow()
        },
        timeFrom(time) {
            return uni.$u.timeFrom(time, "mm-dd")
        },
        onClickLoadMore(item) {
            if (item.remainNum && item.remainNum <= 0) return
            item.loading = true
            item.queryParams.fetchFrom += 10
            let params = item.queryParams
            if (this.queryParams.noteCommentId) params.noteCommentId = this.queryParams.noteCommentId
            app.http.Get(`dataApi/cardCircle/comment/more/${item.id}`, params, (res) => {
                const list = (res.list || []).filter((lowerItem) => {
                    const index = item.lower.findIndex((item) => {
                        return item.id == lowerItem.id
                    })
                    return index < 0
                })
                item.lower.push(...list || [])
                item.remainNum = res.remainNum || 0
                item.loading = false
            })
        },
        pageJump(url) {
            uni.navigateTo({
                url
            })
        },
        sendCom() {
            if (this.sayContent === "") {
                uni.showToast({
                    title: "表达你的态度再评论吧",
                    icon: "none"
                })
                return
            }
            uni.$u.throttle(() => {
                this.pushOrReply(this.clickSon.id || this.clickCom.id || 0, this.clickCom)
            }, 1000)

        },
        //发布评论或回复
        pushOrReply(id, item) {
            const requestUrl = `cardCircle/comment/${id == 0 ? "issue" : "reply"}/${id || this.forumDetail.code}`
            app.http.Post(requestUrl, { content: this.sayContent }, async (res) => {
                const same = {
                    id: res.commentId,
                    userName: this.userInfo.userName || "小卡迷",
                    avatar: this.userInfo.avatar || app.defaultAvatar,
                    isLiked: false,
                    likeNum: 0,
                    created_at: Math.round(+new Date() / 1000),
                    content: res.content,
                    host: true,
                    location: res.location,
                    medal:res.medal || {pic:""},
                    userId:await app.user.getAppDataUserId()
                }
                if (id == 0) {
                    this.commList.unshift({
                        ...same,
                        lower: [],
                        loading: false,
                        queryParams: {
                            fetchFrom: -9,
                            fetchSize: 10
                        },
                        host: true,
                        isFetchEnd: true,
                    })
                } else {
                    item.lower.push({
                        ...same,
                        replyUserName: id == item.id ? "" : this.clickSon.userName,
                    })
                    this.inputHide()
                }
                this.forumDetail.commentNum += 1
                this.sayContent = ""
                this.clickCom = {}
                this.inputHide()
            })
        },
        loadmoreComm() {
            if (this.isFetchEnd) return
            this.queryParams.fetchFrom += this.queryParams.fetchSize
            this.getCommByWorks()
        },
        getDetail() {
            getForumDetail(this.forumDetail.code).then(res => {
                console.log("动态详情", res);
                this.forumDetail.good = res.data.good
                this.forumDetail.vote = res.data.vote
                this.forumDetail.location = res.data.location
                this.forumDetail.topic = res.data.topic
                this.forumDetail.content = res.data.content
                this.forumDetail.hasDetail = true
            }).catch(err => {
                console.log("处理错误", err);
            })
            // app.http.Get(`dataApi/cardCircle/detail/${this.forumDetail.code}`, {}, (res) => {

            // })
        },
        getCommByWorks() {
            app.http.Get(`dataApi/cardCircle/comment/list/` + this.forumDetail.code, this.queryParams, (res) => {
                // console.log("详情结果",res);
                const list = (res.list || []).filter((item) => {
                    if (item.remainNum) item.isFetchEnd = item.remainNum <= 0
                    if (!item.remainNum) item.isFetchEnd = true
                    item.loading = false
                    item.queryParams = {
                        fetchFrom: -9,
                        fetchSize: 10
                    }
                    item.lower = item.lower || []
                    const index = this.commList.findIndex((comm) => {
                        return comm.id === item.id
                    })
                    return index < 0
                })
                this.isFetchEnd = res.isFetchEnd
                this.queryParams.fetchFrom == 1 ? this.commList = list : this.commList.push(...list)
                //跳转至评论
                // if (this.queryParams.noteCommentId && !this.isScrollEnd) {
                //     this.$nextTick(() => {
                //         this.scrollToAnyBlock()
                //     })
                // }
            })
        }
    }
};
</script>
<style lang="scss" scoped>
.wrap {
    height: 1100rpx;
    display: flex;
    align-items: center;
    flex-direction: column;
    width: 750rpx;
}

.vd-user {
    width: 750rpx;
    display: flex;
    align-items: center;
    flex-direction: row;
    height: 90rpx;
    margin-bottom: 10rpx;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    margin-top: 30rpx;
    padding: 0 21rpx;
}

.vd-avatar {
    width: 90rpx;
    height: 90rpx;
    background-color: red;
    border-radius: 50%;
    margin-right: 28rpx;
}

.vd-name {
    width: 670rpx;
    font-size: 29rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #333333;
    margin-bottom: 5rpx;
}

.vd-time {
    width: 670rpx;
    font-size: 23rpx;
    font-family: Microsoft YaHei;
    font-weight: 400;
    color: #7C7C7C;
}

.vd-desc {
    width: 750rpx;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    font-size: 29rpx;
    font-family: Microsoft YaHei;
    font-weight: 400;
    color: #14151A;
    line-height: 36rpx;
    padding: 0 22rpx;
}

// .vd-desc {
//     width: 670rpx;
//     font-size: 28rpx;
//     font-family: Microsoft YaHei;
//     font-weight: 400;
//     color: #14151A;
//     line-height: 36rpx;
// }

.topicsContainer {
    // width: 670rpx;
    width: 750rpx;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    padding: 0 21rpx;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    // box-sizing: border-box;

    // // padding: 0 20rpx;

}

.topicsItem {
    margin-right: 10rpx;
    font-size: 29rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #333333;
    line-height: 42rpx;
    color: #1E46A1;
}

.haowuGoodsWrap {
    // width: 670rpx;
    height: 103rpx;
    margin-top: 26rpx;
    width: 750rpx;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    padding: 0 21rpx;

}

.vd-title {
    font-size: 33rpx;
    width: 750rpx;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    padding: 0 21rpx;
    margin-bottom: 20rpx;
}

.goodsItem {
    width: 401rpx;
    height: 97rpx;
    border: 1rpx solid rgba(149, 150, 149, .6);
    background-color: #ffffff;
    border-radius: 3px;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif 
    padding: 10rpx;
    align-items: center;
    display: flex;
    flex-direction: row;


}

.goodsPic {
    width: 102rpx;
    height: 79rpx;
    // background: #FA1545;
    border-radius: 1rpx;
    margin-right: 12rpx;
}

.goodsInfo {
    font-size: 22rpx;
    font-family: PingFang SC;
    font-weight: 500;
    color: #333333;
    line-height: 25rpx;
    flex: 1;
    // display: flex;
}

.voteContainer {
    width: 750rpx;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    padding: 0 21rpx;

}

.voteTitle {
    font-size: 29rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #333333;
    line-height: 25rpx;
    margin-bottom: 26rpx;
}

.voteOption {
    width: 670rpx;
    height: 66rpx;
    background: #F5F5F5;
    border-radius: 3rpx;
    display: flex;
    align-items: center;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif 
    padding: 0 30rpx;
    position: relative;
    margin-bottom: 15rpx;
    overflow: hidden;
    flex-direction: row;

}

.voteFont {
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #333333;
    flex: 1;
    z-index: 4;
}

.voteNum {
    font-size: 23rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #333333;
    z-index: 4;
}

.voteFont_select {
    color: #FA1545;
}

.voteNum_select {
    color: #FA1545;
}

.voteGray {
    z-index: 2;
    width: 0px;
    height: 66rpx;
    position: absolute;
    left: 0;
    top: 0;
    background-color: #E6E6E6;
    // transition: width 0.6s;
    transition-property: width;
    transition-duration: 0.6s;
}

.voteGray_select {
    background-color: #FFE8E8;
}

.comTop {
    margin-top: 35rpx;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 30rpx;
    // width: inherit;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    width: 750rpx;
    padding: 0 21rpx;
    // padding: 0 21rpx;
}

.commentNum {
    font-size: 29rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #333333;
    flex: 1;
}

.comWrap {
    display: flex;
    flex-direction: column;
    width: 750rpx;
    // width: inherit;
}

.com_avatar {
    width: 62rpx;
    height: 62rpx;
    border-radius: 50%;
    margin-right: 20rpx;
}

.rightWrap {
    flex: 1;
}

.msgInfo {
    margin-top: 10rpx;



}

.msgInfo_top {
    display: flex;
    align-items: center;
    flex-direction: row;
}

.name {
    font-size: 27rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #959695;
}

.time {
    font-size: 21rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #AAAAAA;
    // margin-left: 22rpx;
    // flex: 1;
}


.contentMsg {
    font-size: 27rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #333333;
    margin-top: 20rpx;
    line-height: 33rpx;
    // margin-bottom: 23rpx;
    display: flex;
    flex-wrap: wrap;
    // flex-direction: row;
    // align-items: flex-start;
    // flex-wrap: wrap;
    // padding-bottom: 30rpx;
    // white-space: pre-wrap;
}

.contentInfo {
    // padding-bottom: 30rpx;
    // background-color: red;
}

.comBlock {
    display: flex;
    flex-direction: row;
    flex: 1;
    width: 750rpx;
    // width: inherit;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif

    padding: 14rpx 21rpx;
}

.timeInfo {
    display: flex;
    flex-direction: row;
    align-items: center;
    margin-top: 16rpx;
    flex: 1;
}

.loaction {
    font-size: 21rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #AAAAAA;
    margin-left: 22rpx;
}

.reply_text {
    font-size: 23rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #707070;
    margin-left: 28rpx;
}

.comBlock_son {
    padding-left: 105rpx;


}

.com_avatar_son {
    width: 44rpx;
    height: 44rpx;
}

.loadMore {
    // padding-left: 62rpx;

    // width: auto;
    display: flex;
    flex-direction: row;
    // justify-content: center;

}

.loadMore_wrap {
    font-size: 21rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #636363;
    width: 160rpx;
    background: #EFEFEF;
    border-radius: 3rpx;
    height: 41rpx;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    margin-left: 180rpx;
    // vertical-align: top;
    // display: inline-block;
    // line-height: 41rpx;
    // padding: 0 15rpx;
}

.loadMore_text {
    font-size: 21rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #959695;
}

.sonReply {
    // display: flex;
    // flex-direction: row;
    // flex-wrap: wrap;
    // align-items: center;
}

.replayUserName {
    font-size: 27rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #959695;
    margin-top: 20rpx;
    // position: relative;
    line-height: 33rpx;
    margin-left: 6rpx;
    margin-right: 6rpx;
}

.trueFixInput {
    width: 750rpx;
    // height: 100rpx;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    padding: 20rpx 26rpx;
    background-color: #fff;
    position: fixed;
    bottom: 0;
    flex-direction: row;
    // transition: all 0.2s linear;
    transition-property: transform;
    transition-duration: 0.2s;
    transition-delay: 0s;
    display: flex;
    // align-items: center;
    align-items: flex-end;
    justify-content: space-between;
    // pointer-events: none;
    // z-index: 1001;
    border-radius: 10rpx 10rpx 0 0;


}

.input {
    width: 500rpx;
    // height: 63rpx;
    background: #EFEFEF;
    border-radius: 3rpx;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    padding: 10rpx 30rpx;
    display: flex;
    align-items: center;
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #333333;
}

.send {
    width: 140rpx;
    height: 54rpx;
    color: #fff;
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: 400;
    border-radius: 3rpx;
    text-align: center;
    line-height: 54rpx;
    background-color: #FA1545;
}
.medal-icon{
    width: 30rpx;
    height:30rpx;
    margin-left: 6rpx;
}
</style>