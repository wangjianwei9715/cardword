<!--
 * @Author: lsj a1353474135@163.com
 * @Date: 2023-06-28 10:12:28
 * @LastEditors: lsj a1353474135@163.com
 * @LastEditTime: 2023-07-14 15:21:50
 * @FilePath: \card-world\src\pages\cardForum\video\index.nvue
 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
-->
<template>
    <view class="container">
        <view class="navigateBox" :style="{ top: statusBarHeight + 'px' }">
            <view class="navigateBackBox" @click="onClickBack">
                <image class="navigateBack" src="@/static/information/live_back.png"></image>
            </view>
            <view style="flex:1;"></view>
            <view class="navigateShareBox" style="margin-right: 10rpx;" @click="actionSheetShow = true"
                v-if="current.bit & 1 === 1">
                <u-icon size="46rpx" color="#ffffff" name="more-dot-fill"></u-icon>
            </view>
            <view class="navigateShareBox" @click="onClickShare">
                <image class="navigateShare" src="@/static/information/live_share.png"></image>
            </view>
        </view>
        <view :style="'width: ' + windowWidth + 'px; height: ' + boxStyle.height + 'px;'">
            <list @loadmore="getData" bounce="true" @scroll="scrolls" :loadmoreoffset="wHeight * 1" :show-scrollbar="false"
                ref="listBox" :pagingEnabled="true" :scrollable="true">
                <cell v-for="(item, i) in dataList" :key="i">
                    <div :style="'width: ' + windowWidth + 'px; height: ' + boxStyle.height + 'px;'" @disappear="stop()">
                        <view v-if="Math.abs(k - i) <= 1">
                            <view class="root">
                                <video :ref="'item' + i" :id="item.code" :loop="true" :src="item.video" :muted="item.isplay"
                                    @play="playIngs(i)" :enable-progress-gesture="false" :page-gesture="false"
                                    :controls="false" :http-cache="true" :show-loading="false" :show-fullscreen-btn="false"
                                    :show-center-play-btn="false" :style="boxStyle" :object-fit="'contain'"
                                    @timeupdate="timeupdate($event, i)" @pause="onVideoPause($event, item)"></video>
                                <!-- :poster="getVideoPath(item.url) + '?x-oss-process=video/snapshot,t_1000,m_fast'" -->
                                <!-- <image
								v-if="!item.playIng"
									:src="item.video_url+'?x-oss-process=video/snapshot,t_100,f_jpg'" 
									:mode="mode"
									:style="'width: '+ windowWidth +'px; height: '+ (wHeight - deleteHeight) +'px; position: absolute;'"
								></image> -->
                            </view>
                            <!-- 这个是暂停时出现的图标 -->
                            <view class="videoHover" @click="tapVideoHover(item)" :style="boxStyle">
                                <image v-if="item.state == 'pause'" class="playState" src="@/static/information/play.png">
                                </image>
                            </view>
                            <!-- 最底下的文字部分 -->
                            <view class="content" v-if="dataList.length !== 0 && dataList[k].isShowProgressBarTime == false"
                                @click="onDetail" :class="{ content_opa: isDragging }">
                                <view class="descBox">
                                    <image style="width:50rpx;height:50rpx;border-radius:500px;overflow: hidden;"
                                        :src="item.avatar ? decodeURIComponent(item.avatar) : defaultAvatar"
                                        mode="aspectFill" />
                                    <text class="descAuthor">{{ item.userName }}</text>
                                </view>
                                <text class="userName">{{ item.title }}</text><!-- i={{i}} -->
                                <text class="words">{{ replaceText(decodeURIComponent(item.content))
                                }}</text><!-- k={{k}} -->
                            </view>
                        </view>
                    </div>
                </cell>
            </list>
        </view>

        <!-- tabbar -->
        <nTabbar :data="dataList[k] ? dataList[k] : {}" :commentNum="dataList[k] ? dataList[k].comment : 0"
            :deleteHeight="deleteHeight" @comment.prevent="onDetail"></nTabbar>
        <!-- 1.注意：进度条这类拖拽的东西不能放进block\cell这些循环体中的，要不然touchmove方法会捕捉有误 -->
        <view v-if="showPlan">
            <view v-if="dataList.length !== 0 && dataList[k].isShowProgressBarTime == true"
                :style="'position: absolute; bottom: ' + (proBarBottom + 10) + 'px; left: ' + (windowWidth * 2 - this.windowWidth * 1.35) / 2 + 'px;'">
                <text style="font-size: 22px; font-weight: bold; color: #F1F1F1;">{{ changeTime }} / {{ videoTimes }}</text>
            </view>
            <view v-if="isDragging == false" @touchmove="touchmove" @touchend="touchend" @touchstart="touchstart"
                style="position: fixed; left: 0;z-index:9" :style="{ bottom: proBarBottom + 'px' }">
                <!-- 1.这一步必须加，为了适配低端机型 -->
                <text :style="'width: ' + windowWidth + 'px; opacity: 0;'">.</text>
                <!-- 2.这是未加载的时的右边的灰色部分 -->
                <view
                    :style="'width: ' + windowWidth + 'px; height: 4upx; background-color: #C8C7CC; position: absolute; bottom: ' + ProgressBarBottom + 'upx; opacity: ' + ProgressBarOpacity + ';'">
                </view>
                <!-- 4.注意：isShowProgressBarTime 加入了返回数据中 -->
                <view v-if="dataList.length !== 0 && dataList[k].isShowProgressBarTime == false"
                    :style="'width: ' + (currentPosition) + 'px; height: 4upx; background-color: #FFFFFF; position: absolute; bottom: ' + ProgressBarBottom + 'upx; left: 0; opacity: ' + (ProgressBarOpacity - 0.1) + ';'">
                </view>
                <view v-if="dataList.length !== 0 && dataList[k].isShowProgressBarTime == true"
                    :style="'width: ' + (currentPositions) + 'px; height: 8upx; background-color: #FFFFFF; position: absolute; bottom: ' + ProgressBarBottom + 'upx; left: 0; opacity: ' + (ProgressBarOpacity + 0.05) + ';'">
                </view>
                <view v-if="dataList.length !== 0 && dataList[k].isShowProgressBarTime == false"
                    :style="'width: 4px; height: 4px; background-color: #FFFFFF; border-radius: 10px; position: absolute; bottom: ' + (ProgressBarBottom - 2) + 'upx; left: ' + (currentPosition) + 'px; opacity: ' + ProgressBarOpacity + ';'">
                </view>
                <view v-if="dataList.length !== 0 && dataList[k].isShowProgressBarTime == true"
                    :style="'width: ' + dotWidth + 'px; height: ' + dotWidth + 'px; background-color: #FFFFFF; border-radius: 10px; position: absolute; bottom: ' + (ProgressBarBottom - 5) + 'upx; left: ' + (currentPositions - 5) + 'px; opacity: ' + ProgressBarOpacity + ';'">
                </view>
            </view>
        </view>
        <!-- 分享 -->
        <nvueShare :visible.sync='shareShow' :shareData='shareData' :report="(current.bit & 1) != 1" @report="goReport">
        </nvueShare>
        <!-- 底部详情 -->
        <!-- <view class="popup" :style="{ height: showDetail ? wHeight : 0 + 'px' }">
            <view class="popup-shadow" :style="{ height: showDetail ? wHeight : 0 + 'px' }" @click="onClosePopup"></view>
            <view class="popup-content" :style="{ height: showDetail ? (boxStyle.height - boxGapHeight) : 0 + 'px' }">
                <list ref="comList" v-if="showDetail" :show-scrollbar="false" :pagingEnabled="false" :scrollable="true"
                    @loadmore="getMoreComment" :loadmoreoffset="1" @scroll="listscroll">
                    <cell>
                        <vdetail ref="vdetail" style="padding-top: 20rpx;" :articleData="dataList[k] ? dataList[k] : {}"
                            @reply="onReply">
                            <nTabbar :isSon="true" v-if="showDetail" :data="dataList[k] ? dataList[k] : {}"
                                :commentNum="dataList[k] ? dataList[k].comment : 0" :deleteHeight="deleteHeight"
                                :detail="true" @comment="onReply"></nTabbar>
                        </vdetail>
                    </cell>
                </list>
            </view>
        </view> -->
        <!-- view.detail -->
        <detailPop :eventPenetrationEnabled="showDetail" :show.sync="showDetail" :forumDetail.sync="dataList[k]"
            ref="detailPop"></detailPop>
        <view class="upslide" :class="{ 'upslide-show': upslideShow }">
            <image class="upslide-pic" src="@/static/information/more_bg.png" />
            <image class="upslide-hand" src="@/static/information/more_icon.png" />
            <text class="upslide-name">上滑查看更多视频</text>
        </view>
        <!-- 输入框 -->
        <!-- <nTextarea :focus="chatData.focus" :replyName="chatData.replyName" @chatConfirm="onChatConfirm" @blur="onBlur">
        </nTextarea> -->
        <u-action-sheet :actions="PersonSheet" :show="actionSheetShow" cancelText="取消" :closeOnClickAction="true"
            @close="actionSheetShow = false" @select="onSelectActionSheet"></u-action-sheet>
    </view>
</template>
<script>
import nvueShare from "../../live/components/nvueShare.nvue";
import nTabbar from "./components/nTabbar.nvue";
import nTextarea from "./components/nTextarea.nvue";
import vdetail from "./components/vdetail.nvue";
import detailPop from "./components/detail.nvue"
const boxGapHeight = uni.upx2px(400)
const app = getApp().globalData.app;
const ForumBit = {
    IS_PERSON: 1,//本人
    IS_FOLLOW: 2,//关注
    IS_LIKE: 4,//点赞
    IS_COLLECTION: 8//收藏
}
const shareData = {
    shareUrl: "",
    title: "",
    summary: "",
    thumb: ""
};
const chat = {
    replyId: 0,
    replyName: '',
    fatherId: 0,
    focus: false
}
const PersonSheet = [
    { name: "设为可见/设为私密", behavior: "setPrivate" },
    { name: "编辑内容", behavior: "goEdit" },
    { name: "删除此动态", behavior: "deleteForum", color: "#fb374e" }
]
export default {
    name: "CardForumVideoPage",
    data() {
        return {
            PersonSheet,
            actionSheetShow: false,
            boxGapHeight,
            statusBarHeight: app.statusBarHeight,
            code: '',
            ForumBit,
            shareShow: false,
            shareData: { ...shareData },
            isFetchEnd: false,
            proBarBottom: 0,
            chatData: { ...chat },
            showDetail: false,
            showPlan: true,
            resetLoadmored: false,
            searchQ: '',
            vType: 100,
            //下面打🌟号的是必须要的基础字段
            //下面打💗号的是拥有滑动条的必须字段
            dataList: [],//用于数据循环的列表🌟💗
            wHeight: uni.getSystemInfoSync().screenHeight,//获取的屏幕高度🌟💗
            boxStyle: {//视频，图片封面样式🌟💗
                'height': 0,
                'width': 0,
            },
            k: 0,//默认为0🌟💗
            isDragging: false,//false代表停止滑动🌟💗
            windowWidth: 0,//获取屏幕宽度🌟💗
            windowHeight: 0,
            platform: '',//用于获取操作系统：ios、android🌟💗
            playIng: false,//用于视频初始化时是否播放，默认不播放🌟💗
            videoTime: '',//视频总时长，这个主要用来截取时间数值💗
            videoTimes: '',//视频时长，用这个来获取时间值，例如：00:30这个时间值💗
            changeTime: '',//显示滑动进度条时变化的时间💗
            currenttimes: 0,//当前时间💗
            isShowProgressBarTime: false,//是否拖动进度条，如果拖动（true）则显示进度条时间，否则不显示（false）【1.0.4已废弃，但是意思需要记住】
            ProgressBarOpacity: 0.7,//进度条不拖动时的默认值，就是透明的💗
            dotWidth: 0,//播放的小圆点，默认没有💗
            deleteHeight: 0,//测试高度🌟💗
            percent: 0,//百分小数💗
            currentPosition: 0,//滑块当前位置💗//2.0已弃用，现已用于后端参数
            currentPositions: 0,//滑块当前位置的副本💗//2.0已弃用，现已用于后端参数
            newTime: 0,//跟手滑动后的最新时间💗
            timeNumber: 0,//🌟💗
            ProgressBarBottom: 20,//进度条离底部的距离💗
            object_fit: 'fill',//视频样式默认包含🌟💗
            mode: 'aspectFit',//图片封面样式🌟💗
            timeout: "",//🌟用来阻止 setTimeout()方法
            voice: "",//🌟用来阻止 setTimeout()方法
            oldVideo: "",
            timers: "",
            upslideShow: false,
            parsePic: getApp().globalData.parsePic,
            userInfo: {},
            fromMine: false,
            defaultAvatar: app.defaultAvatar

        }
    },
    components: {
        nvueShare,
        nTabbar,
        nTextarea,
        vdetail,
        detailPop
    },
    watch: {
        k(k, old_k) {//监听 k 值的变化，可以控制视频的播放与暂停
            console.log("当前的K", k);
            console.log("老的k", old_k);
            this.dataList[old_k].state = 'stop'
            this.dataList[old_k].isplay = true
            this.dataList[k].isplay = false
            uni.createVideoContext(this.dataList[k].code, this).seek(0)
            uni.createVideoContext(this.dataList[k].code, this).play();
            uni.createVideoContext(this.dataList[old_k].code, this).pause()
            // console.log('已经暂停 --> 第' + (old_k + 1) + '个视频～')//提示

            //【2.0版本更新内容】- start
            var p = k + 1
            this.$nextTick(() => {
                uni.createVideoContext(this.dataList[p].code, this).play()
                setTimeout(() => {
                    uni.createVideoContext(this.dataList[p].code, this).pause()
                    console.log(`预加载第${p + 1}个视频,${this.dataList[p].code},${this.dataList[p].url}`);
                }, 100)
            })
            //【2.0版本更新内容】- end
            //【此处处理进度条卡住的问题】
            if (uni.getSystemInfoSync().platform !== 'ios') {
                setTimeout(() => {
                    uni.createVideoContext(this.dataList[k].code, this).pause()
                    uni.createVideoContext(this.dataList[k].code, this).play()
                }, 100)
            }
        }
    },
    computed: {
        current() {
            if (!this.dataList[this.k]) return { bit: 0 }
            return this.dataList[this.k]
        },
        isPerson() {
            return (this.current.bit & ForumBit.IS_PERSON) === ForumBit.IS_PERSON
        },
        isFollow() {
            return (this.current.bit & ForumBit.IS_FOLLOW) === ForumBit.IS_FOLLOW
        },
        isLike() {
            return (this.current.bit & ForumBit.IS_LIKE) === ForumBit.IS_LIKE
        },
        isCollection() {
            return (this.current.bit & ForumBit.IS_COLLECTION) === ForumBit.IS_COLLECTION
        }
    },
    onShow() {
        console.log('回到前台');
        if (this.dataList.length !== 0) {
            this.dataList[this.k].state = 'play';
            uni.createVideoContext(this.dataList[this.k].code, this).play()
        }
    },
    onHide() {
        this.dataList[this.k].state = 'pause';//界面隐藏也要停止播放视频
        uni.createVideoContext(this.dataList[this.k].code, this).pause();//暂停以后继续播放
        console.log('到后台');
    },
    onLoad(query) {
        this.upslideInit()
        uni.onKeyboardHeightChange(this.keyBoardHeightChange);
        this.code = query.code;
        this.vType = query.type;
        this.searchQ = query.q || '';
        this.fromMine = query.fromMine == "1"
        this.platform = uni.getSystemInfoSync().platform
        var model = uni.getSystemInfoSync().model
        // if (this.platform == 'ios' && (model !== 'iPhone6' || model !== 'iPhone6s' || model !== 'iPhone7' || model !== 'iPhone8')) {
        //     this.deleteHeight = 32//有 tabbar的 修改这里可以改变视频高度
        // } else {
        //     this.deleteHeight = 0
        // }
        // #ifdef APP-NVUE
        this.deleteHeight = plus.navigator.getSafeAreaInsets().deviceBottom / 2
        // #endif
        this.windowWidth = uni.getSystemInfoSync().screenWidth//获取屏幕宽度
        this.boxStyle.width = this.windowWidth + 'px'//给宽度加px
        this.wHeight = uni.getSystemInfoSync().screenHeight;//获取屏幕高度
        this.proBarBottom = uni.upx2px(100) + this.deleteHeight
        this.boxStyle.height = this.wHeight - this.deleteHeight - uni.upx2px(124);//改变视频高度
        this.get()//这一步，加载视频数据

        uni.$on("informationChange", (res) => {
            if (res && res.code) {
                let findItem = this.dataList.find((item) => {
                    return item.code == res.code;
                });
                if (findItem) {
                    if (res.isLikes) {
                        findItem.isLikes = res.isLikes;
                        findItem.likes = res.likes;
                    } else {
                        findItem.favorite = res.favorite;
                        findItem.isFavorite = res.isFavorite;
                    }
                    findItem.comment = res.comment
                }
            }
        });
        uni.$on('resetLoadmore', () => {
            if (this.resetLoadmored) {
                this.$refs["comList"].resetLoadmore();
            }
        })
    },
    onReady() {
    },
    onUnload() {
        uni.$off('resetLoadmore');
        uni.offKeyboardHeightChange(this.keyBoardHeightChange);
    },

    methods: {
        onSelectActionSheet(item) {
            // console.log(item);
            if (item.behavior) {
                //@ts-ignore
                this[item.behavior] && this[item.behavior]()
                return
            }
        },
        onVideoPause(event, item) {
            // console.log("视频暂停咯", item);
        },
        goReport() {
            uni.navigateTo({
                url: `/pages/cardForum/report?code=${this.current.code}&source=2&byInformer=${this.current.userId}`
            })
        },
        goEdit() {
            uni.navigateTo({
                url: "/pages/cardForum/release?code=" + this.current.code
            })
            // this.pageJump("/pages/cardForum/release?code=" + this.current.code)
        },
        //删除作品
        deleteForum() {
            uni.showModal({
                title: "提示",
                content: "是否删除该作品?",
                success: (res) => {
                    if (res.confirm) {
                        // app.http.Post("")
                        app.http.Post("cardCircle/delete/" + this.current.code, {}, () => {
                            uni.showToast({
                                title: "删除成功",
                                icon: "none"
                            })
                            uni.$emit("delCardForum", this.code)
                            app.platform.pageBack()
                        })
                    }
                }
            })
        },
        //设置为私密
        setPrivate() {
            console.log(this.current);
            uni.showModal({
                title: "提示",
                content: `是否将作品设为${this.current.private ? "可见" : "私密"}`,
                success: (res) => {
                    if (res.confirm) {
                        app.http.Post(`cardCircle/set/${this.current.private ? 'pub' : 'pri'}/${this.current.code}`, {}, () => {
                            this.current.private = !this.current.private
                            uni.$emit("setCardForumPrivate", { code: this.current.code, private: this.current.private })
                            uni.showToast({
                                title: "操作成功",
                                icon: "none"
                            })
                        })
                    }
                }
            })
        },
        listscroll(e) {
            //@ts-ignore
            this.$refs.vdetail.tapTimer && clearTimeout(this.$refs.vdetail.tapTimer)
            //@ts-ignore
            this.$refs.vdetail.lontapTimer && clearTimeout(this.$refs.vdetail.lontapTimer)
        },
        upslideInit() {
            this.upslideShow = uni.getStorageSync('upslideShow') !== false;
            console.log('d-', uni.getStorageSync('upslideShow') !== false);
            if (this.upslideShow) {
                uni.setStorageSync('upslideShow', false);
                setTimeout(() => {
                    this.upslideShow = false;
                }, 3000)
            }
        },
        getVideoPath(url) {
            const urlList = url.split(",")
            for (let index = 0; index < urlList.length; index++) {
                // const element = array[index];
                const path = this.parsePic(decodeURIComponent(urlList[index]))
                if (uni.$u.test.video(path) && path.indexOf("x-oss-process=video/snapshot") < 0) return path
            }
        },
        replaceText(text) {
            return text.replace(/\<p\>/g, '').replace(/\<\/p\>/g, '')
        },
        onClickBack() {
            app.platform.pageBack()
            // uni.navigateBack({ delta: 1 })
        },
        onClickShare() {
            uni.$u.throttle(() => {
                const content = decodeURIComponent(this.current.content)
                let cover = ""
                const urlList = this.current.url.split(",")
                for (let index = 0; index < urlList.length; index++) {
                    const path = this.parsePic(decodeURIComponent(urlList[index]))
                    if (!uni.$u.test.video(path)) {
                        cover = path+`?x-oss-process=image/resize,h_100,w_100`
                        break;
                    }
                }
                this.shareData = {
                    shareUrl: `share/${app.localTest ? 'testH5' : 'h5'}/#/pages/cardForum/detail?code=${this.current.code}`,
                    title: this.current.title,
                    summary: content ? (content.length > 20 ? content.substr(0, 20) + '...' : content) : "我发现了一篇精彩动态",
                    //@ts-ignore
                    thumb: cover
                };
                this.shareShow = true;
            }, 1000)
        },
        getData() {

        },
        touchstart(event) {
            this.dataList[this.k].isShowProgressBarTime = true //显示时间线
            this.ProgressBarOpacity = 1 //让滑块显示起来更明显一点
            this.dotWidth = 10 //让点显示起来更明显一点
        },
        touchend() {//当手松开后，跳到最新时间
            uni.createVideoContext(this.dataList[this.k].code, this).seek(this.newTime)
            if (this.dataList[this.k].state == 'pause') {
                this.dataList[this.k].state = 'play'
                uni.createVideoContext(this.dataList[this.k].code, this).play()
            }
            this.dataList[this.k].isShowProgressBarTime = false //触摸结束后，隐藏时间线
            this.ProgressBarOpacity = 0.5 //隐藏起来进度条，不那么明显了
            this.dotWidth = 0 //隐藏起来进度条，不那么明显了
        },
        touchmove(event) {//当手移动滑块时，计算位置、百分小数、新的时间
            var msg = []
            if (this.videoTime !== '') {
                msg = this.videoTime.split(':')
            }
            var timeNumber = Number(msg[0]) * 60 + Number(msg[1])
            this.currentPositions = event.changedTouches[0].screenX
            this.percent = this.currentPositions / this.windowWidth
            this.newTime = this.percent * timeNumber
            this.currenttimes = parseInt(this.newTime)
            let theTime = this.newTime
            let middle = 0;// 分
            if (theTime > 60) {
                middle = parseInt(theTime / 60);
                theTime = parseInt(theTime % 60);
            }
            this.changeTime = `${Math.round(middle) > 9 ? Math.round(middle) : '0' + Math.round(middle)}:${Math.round(theTime) > 9 ? Math.round(theTime) : '0' + Math.round(theTime)}`
        },
        timeupdate(event, index) {//计算滑块当前位置，计算当前百分小数
            if (index == this.k) {
                var currenttime = event.detail.currentTime
                this.timeNumber = Math.round(event.detail.duration)
                this.getTime()
                this.percent = currenttime / this.timeNumber
                this.currentPosition = this.windowWidth * this.percent
                let theTime = currenttime
                let middle = 0;// 分
                if (theTime > 60) {
                    middle = parseInt(theTime / 60);
                    theTime = parseInt(theTime % 60);
                }
                if (!this.dataList[this.k].isShowProgressBarTime) {
                    this.changeTime = `${Math.round(middle) > 9 ? Math.round(middle) : '0' + Math.round(middle)}:${Math.round(theTime) > 9 ? Math.round(theTime) : '0' + Math.round(theTime)}`
                }
            }
        },
        waiting(event) {
            console.log("waiting", event);
        },
        getTime() {//得到时间函数
            this.videoTime = this.formatSeconds(this.timeNumber);
            var msg = []
            if (this.videoTime !== '') {
                msg = this.videoTime.split(':')
            }
            this.videoTimes = `${msg[0] > 9 ? msg[0] : '0' + msg[0]}:${msg[1] > 9 ? msg[1] : '0' + msg[1]}`;
        },
        keyBoardHeightChange(obj) {
            this.$refs.detailPop && this.$refs.detailPop.keyBoardHeightChange(obj)
        },
        formatSeconds(value) {//获取时间函数
            let theTime = parseInt(value);// 秒
            let middle = 0;// 分
            if (theTime > 60) {
                middle = parseInt(theTime / 60);
                theTime = parseInt(theTime % 60);
            }
            return `${middle > 9 ? middle : middle}:${theTime > 9 ? theTime : theTime}`;
        },
        playIngs(index) {

        },
        stop() {
            // console.log('stop')
        },
        scrolls(event) {
            // uni.$u.debounce(()=>{
            this.isDragging = event.isDragging
            if (!event.isDragging) {//isDragging：判断用户是不是在滑动，滑动：true，停止滑动：false。我们要用户停止滑动时才给 k 赋值，这样就可以避免很多麻烦
                var i = Math.round(Math.abs(event.contentOffset.y) / (this.wHeight - this.deleteHeight - uni.upx2px(124) + 1))//先用绝对值取出滑动的距离，然后除以屏幕高度，取一个整，就知道你现在滑动到哪一个视频了
                if (i !== this.k) {//这里加判断是因为这个方法会执行很多次，会造成重复请求，所以这里写一个限制
                    if (uni.getSystemInfoSync().platform == 'ios') {
                        this.k = i//判断了用户没有滑动，确认了用户的确是在看这个视频，然后就赋值啦
                        this.dataList[this.k].state = 'play'
                        if (this.k == this.dataList.length - 1) {
                            this.getMore()
                        }
                        // console.log('正在播放 --> 第' + (this.k + 1) + '个视频～')
                    } else {
                        clearTimeout(this.timers);
                        this.timers = setTimeout(() => {
                            this.k = i//判断了用户没有滑动，确认了用户的确是在看这个视频，然后就赋值啦
                            this.dataList[this.k].state = 'play'
                            if (this.k == this.dataList.length - 1) {
                                this.getMore()
                            }
                            // console.log('正在播放 --> 第' + (this.k + 1) + '个视频～')
                        }, 80)
                    }
                }
            }
            // },500)
        },
        get() {
            app.http.Get(`dataApi/cardCircle/detail/${this.code}`, {}, (res) => {
                res.data.video = this.getVideoPath(res.data.url)
                const data = [{ ...res.data, isShowProgressBarTime: false, state: 'play', isplay: false, hasDetail: true, private: (res.state == 2 && ((res.data.bit & 1) === 1)) }]

                this.dataList = [...data]
                // console.log(this.dataList);
                setTimeout(() => {
                    uni.createVideoContext(this.dataList[0].code, this).seek(0)
                    uni.createVideoContext(this.dataList[0].code, this).play()
                }, 200)
                if (!this.fromMine) this.getMore()
            })
        },
        getMore() {
            if (this.isFetchEnd) return;
            app.http.Get(`dataApi/cardCircle/commend/video/list/${this.dataList[this.k].code}`, { fetchSize: 10, viewCode: this.code }, async (res) => {
                console.log("更多数据:", res);
                this.isFetchEnd = res.isFetchEnd;
                const list = res.list.map((x) => {
                    return { ...x, video: this.getVideoPath(x.url), isShowProgressBarTime: false, state: 'stop', isplay: true, hasDetail: false }
                })
                var p = this.dataList.length;
                this.dataList.push(...list)
                setTimeout(() => {
                    uni.createVideoContext(this.dataList[p].code, this).play()
                    setTimeout(() => {
                        uni.createVideoContext(this.dataList[p].code, this).seek(0)
                        uni.createVideoContext(this.dataList[p].code, this).pause()
                        console.log('预加载第' + (p + 1) + '个视频：' + this.dataList[p].code)
                    }, 100)
                }, 50)
            })
        },
        //点击播放&&暂停
        tapVideoHover(item) {
            this.dataList[this.k].isShowProgressBarTime = false
            this.ProgressBarOpacity = 0.5
            this.dotWidth = 0
            if (item.state == 'play') {
                item.state = 'pause';
                uni.createVideoContext(this.dataList[this.k].code, this).pause();
            } else {
                item.state = 'play';
                uni.createVideoContext(this.dataList[this.k].code, this).play();
            }
        },
        onDetail() {
            this.showPlan = false;
            this.showDetail = true;
            return;
        },
        // 开始回复
        onReply(res) {
            app.platform.hasLoginToken(async () => {
                if (!this.userInfo.userId) {
                    this.userInfo = await app.user.getUserInfo()
                }
                this.chatData = {
                    replyId: res ? res.replyId : 0,
                    replyName: this.userInfo.userName,
                    fatherId: res ? res.fatherId : 0,
                    focus: true,
                    avatar: this.userInfo.avatar
                }
                // console.log(this.chatData);
            })
        },
        onBlur() {
            this.chatData = { ...chat }
            uni.hideKeyboard()
        },
        onClosePopup() {
            if (this.chatData.focus) {
                this.onBlur();
                return;
            }
            this.showDetail = false;
            setTimeout(() => { this.showPlan = true }, 250)
        },
        getMoreComment() {
            this.resetLoadmored = true;
            uni.$emit('comloadmore')
        },
        timeFormat(time) {
            return uni.$u.timeFormat(time, 'mm月dd日 hh:MM')
        }
    }
}
</script>
<style>
.container {
    background-color: #000000;
}

.navigateBox {
    width: 750rpx;
    height: 100rpx;
    position: fixed;
    top: 0px;
    left: 0px;
    right: 0px;
    display: flex;
    align-items: center;
    flex-direction: row;
    /* justify-content: space-between; */
    z-index: 999;
    padding: 0 33rpx 0 13rpx;
}

.navigateBackBox {
    width: 61rpx;
    height: 61rpx;
    display: flex;
    align-items: center;
    flex-direction: row;
    justify-content: center;
}

.navigateBack {
    width: 21rpx;
    height: 38rpx;
}

.navigateShareBox {
    width: 77rpx;
    height: 77rpx;
    display: flex;
    align-items: center;
    flex-direction: row;
    justify-content: center;
    margin-right: -20rpx;
}

.navigateShare {
    width: 37rpx;
    height: 37rpx;
}

.item {
    /* width : 750rpx; */
    background-color: #000000;
    position: relative;
}

.videoHover {
    position: absolute;
    top: 0;
    left: 0;
    flex: 1;
    background-color: rgba(0, 0, 0, 0.1);
    justify-content: center;
    align-items: center;

    /* border-style: dashed;
		border-color: #DD524D;
		border-width: 1px; */
}

.playState {
    width: 160rpx;
    height: 160rpx;
    opacity: 0.2;
}

.userInfo {
    position: absolute;
    bottom: 110px;
    right: 10px;
    flex-direction: column;

}

.userAvatar {
    border-radius: 500%;
    margin-bottom: 15px;
    border-style: solid;
    border-width: 2px;
    border-color: #ffffff;
}

.userAvatar {
    width: 100rpx;
    height: 100rpx;
}

.likeIco,
.shareIco,
.commentIco {
    width: 60rpx;
    height: 60rpx;
    margin-top: 15px;
}

.likeNum,
.commentNum,
.shareTex {
    color: #ffffff;
    font-size: 30rpx;
    text-align: center;
    margin: 5px;
}

.likeNumActive {
    color: red;
}

.content {
    width: 540rpx;
    z-index: 99;
    position: absolute;
    bottom: 40rpx;
    /* justify-content: center; */
    left: 44rpx;
    flex-direction: column;
    justify-content: flex-start;
    color: #ffffff;
    transition-property: opacity;
    transition-duration: 0.1s;
    opacity: 1;
}

.content_opa {
    opacity: 0.5;
}

.descBox {
    width: 540rpx;
    height: 50rpx;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
}

.descAuthor {
    font-size: 27rpx;
    font-family: PingFang SC;
    font-weight: 500;
    color: #FFFFFF;
    margin-left: 14rpx;
}

.userName {
    width: 540rpx;
    font-size: 25rpx;
    color: #ffffff;
    margin-top: 18rpx;
    line-height: 38rpx;
    overflow: hidden;
    text-overflow: ellipsis !important;
    /* 超出部分省略号 */
    lines: 1;
}

.words {
    width: 540rpx;
    font-size: 25rpx;
    color: #ffffff;
    line-height: 38rpx;
    overflow: hidden;
    text-overflow: ellipsis !important;
    /* 超出部分省略号 */
    lines: 2;
    /* 超出固定行数显示省略号 */
}

.root {
    background-color: #000000;
}

.popup {
    width: 750rpx;
    height: 0;
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 999;
}

.popup-shadow {
    width: 750rpx;
    position: absolute;
    left: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
}

.popup-content {
    width: 750rpx;
    position: absolute;
    left: 0;
    bottom: 0;
    border-top-left-radius: 20rpx;
    border-top-right-radius: 20rpx;
    transition-property: height;
    transition-duration: 0.2s;
    transition-delay: 0s;
    justify-content: space-between;
    transition-timing-function: linear;
    background: #fff;
    padding-left: 40rpx;
    padding-right: 40rpx;
}

.vd-user {
    width: 670rpx;
    display: flex;
    align-items: center;
    flex-direction: row;
    height: 130rpx;
    margin-bottom: 40rpx;
    padding-top: 40rpx;
}

.vd-avatar {
    width: 90rpx;
    height: 90rpx;
    border-radius: 50%;
    margin-right: 28rpx;
}

.vd-name {
    width: 670rpx;
    font-size: 29rpx;
    font-family: PingFang SC;
    font-weight: 600;
    color: #333333;
    margin-bottom: 5rpx;
}

.vd-time {
    width: 670rpx;
    font-size: 23rpx;
    font-family: Microsoft YaHei;
    font-weight: 400;
    color: #7C7C7C;
}

.upslide {
    width: 220rpx;
    height: 400rpx;
    position: fixed;
    left: 265rpx;
    top: 500rpx;
    opacity: 0;
}

.upslide-show {
    opacity: 1;
}

.upslide-name {
    width: 220rpx;
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #FFFEFE;
    text-align: center;
}

.upslide-pic {
    width: 160rpx;
    height: 324rpx;
    margin-left: 26rpx;
    margin-bottom: 25rpx;
}

.upslide-hand {
    width: 122rpx;
    height: 104rpx;
    position: absolute;
    right: -35rpx;
    top: 193rpx;
}
</style>
