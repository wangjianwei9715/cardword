<template>
    <div class="content" style="display: flex;width: 750rpx;flex-direction: column;align-items: center;">
        <!-- <view class="fakerView" :style="{ height: navHeight + tabsHeight + 'px' }"></view> -->
        <div class="fakerView" :style="{ height: fixedTopHeight + 'px' }"></div>
        <div class="fixedTop" id="fixedTop">

            <div class="navBar" id="navBar" ref="navBar">
                <div :style="{ height: app.statusBarHeight + 'px' }"></div>
                <div class="nav">
                    <div class="navSearchWrap" @click="pageJump('/pages/cardForum/search')">
                        <input class="navInput" type="text" :value="nowTabText" placeholder="搜你想搜..." disabled />
                        <div class="nav_search flexCenter">搜索</div>
                    </div>
                    <div class="camera" @click.stop="actionSheet = true">发布</div>
                </div>
            </div>
            <u-tabs :duration="300" class="tabs" id="tabs" :current="tabs.index" @click="tabClick" :list="tabs.list"
                ref="tabs"></u-tabs>
        </div>

        <swiper :duration="300" v-if="initFinish" class="swiperContainer" :style="{ height: scrollViewHeight + 'px' }"
            :current="tabs.index" @change="swiperChange" @animationfinish="swiperChangeAnimationfinish"
            @transition="swiperTransition">
            <swiper-item class="swiperItem" v-for="(tab, tabIndex) in tabs.list">
                <!-- #ifndef APP-NVUE -->
                {{ tab.name }}
                <div v-for="(item,index) in tab.list" @click="goToDetail(item)">
                    {{ item.title }},{{ item.desc }}
                </div>
                <!-- #endif -->
                <cardSkeleton :loading="!tab.firstReqEnd" />
                <!-- #ifndef APP-NVUE -->
                <view class="hotTopicWrap" v-if="tabIndex == 2 && tab.firstReqEnd">
                    <view class="hotTopicRow">
                        <text class="hotTopicRow_title">热门话题</text>
                        <text class="hotTopicRow_title" @click="pageJump('/pages/cardForum/topics/list')">全部</text>
                    </view>
                    <scroll-view scroll-x="true" :show-scrollbar="false" class="hotTopicScroll">
                        <view class="scrollTopicWarp">
                            <view class="topicItem"></view>
                            <view class="topicItem"></view>
                            <view class="topicItem"></view>
                            <view class="topicItem"></view>
                            <view class="topicItem"></view>
                            <view class="topicItem"></view>
                        </view>
                    </scroll-view>
                </view>
                <!-- #endif -->
                <!-- #ifdef APP-NVUE -->
                <waterfalls column-count="2" v-if="tab.list.length" :ref="`waterfalls${tabIndex}`" left-gap="10"
                    :height="scrollViewHeight + 'px'" right-gap="10" column-gap="8" :always-scrollable-vertical="true"
                    @loadmore="loadmoreData(tabIndex)" @refresh="refreshData(tabIndex)">
                    <header v-if="tabIndex == 2">
                        <div class="hotTopicWrap">
                            <div class="hotTopicRow">
                                <text class="hotTopicRow_title">热门话题</text>
                                <text class="hotTopicRow_title" @click="pageJump('/pages/cardForum/topics/list')">全部</text>
                            </div>
                            <scroll-view scroll-x="true" :show-scrollbar="false" class="hotTopicScroll">
                                <div class="topicItem"></div>
                                <div class="topicItem"></div>
                                <div class="topicItem"></div>
                                <div class="topicItem"></div>
                                <div class="topicItem"></div>
                                <div class="topicItem"></div>
                            </scroll-view>
                        </div>
                    </header>
                    <cell v-for="(item, index) in tab.list" class="waterfall-item-cell" @click="goToDetail(item)">
                        <div class="waterfall-item">
                            <div class="waterfall-item__image">
                                <image :src="item.image" style="width:300rpx" mode="widthFix"></image>
                            </div>
                            <div class="waterfall-item__ft">
                                <div class="waterfall-item__ft__title">
                                    <text class="value">{{ item.title }}</text>
                                </div>
                                <div class="waterfall-item__ft__desc uv-line-2">
                                    <text class="value">{{ item.desc }}</text>
                                </div>
                            </div>
                        </div>
                    </cell>
                </waterfalls>
                <!-- #endif -->

            </swiper-item>
        </swiper>
        <u-action-sheet :actions="actionsList" cancelText="取消" :show="actionSheet" @select="onSelectAction"
            @close="actionSheet = false"></u-action-sheet>
    </div>
</template>
<script>
import waterfalls from "./components/waterfalls.vue"
import cardSkeleton from "./components/cardSkeleton.vue"
// import uvWaterfall from './components/uv-waterfall/uv-waterfall.vue'
const mockList = [{ title: "这是表踢踢踢踢踢", desc: "描述描述还是输", image: 'https://images.cardhobby.com/1bca1e81d8af42d081984ba4890f0bc4.jpg?imageView2/2/w/200' },
{ title: "这是表踢踢踢踢踢", desc: "描述描述还是输", image: 'https://images.cardhobby.com/32ac7886-2c11-4920-8e7a-742d436e62c7.jpg?imageView2/2/w/200' },
{ title: "这是表踢踢踢踢踢", desc: "描述描述还是输", image: 'https://images.cardhobby.com/f70a3862fc224c94a1672c28940b34e3.jpg?imageView2/2/w/200' },
{ title: "这是表踢踢踢踢踢", desc: "描述描述还是输", image: 'https://images.cardhobby.com/2c9607d02842139323fe9c2e86b4305a.jpg?imageView2/2/w/200' },
{ title: "这是表踢踢踢踢踢", desc: "描述描述还是输", image: 'https://images.cardhobby.com/e18c950220664d2ea430fcea7a514770.jpg?imageView2/2/w/200' },
{ title: "这是表踢踢踢踢踢", desc: "描述描述还是输", image: 'https://images.cardhobby.com/C4AC6C305E3543C39297A8B876EFE13D.jpg?imageView2/2/w/200' },
{ title: "这是表踢踢踢踢踢", desc: "描述描述还是输", image: 'https://images.cardhobby.com/1f22e3dc5679da68c24e8e28f72a9192.jpg?imageView2/2/w/200' },
{ title: "这是表踢踢踢踢踢", desc: "描述描述还是输", image: 'https://images.cardhobby.com/760f1341-6a13-4e01-91e2-f6a2c69b8490.jpg?imageView2/2/w/200' },
{ title: "这是表踢踢踢踢踢", desc: "描述描述还是输", image: 'https://images.cardhobby.com/4f1c7d52e6ab48b8a1f10c75c08dc421.jpg?imageView2/2/w/200' },
{ title: "这是表踢踢踢踢踢", desc: "描述描述还是输", image: 'https://images.cardhobby.com/9740T20210822233025348.jpg?imageView2/2/w/200' },]
const actionsList = [
    {
        name: "动态",
        url: "/pages/cardForum/release"
    }, {
        name: "卡册",
        subname: "制作图片对应卡种的高质量卡册，适用于凑套等"
    }
]
const app = getApp().globalData.app;
const defaultTagObj = {
    queryParams: {
        pageIndex: 1,
        pageSize: 15,
        q: ""
    },
    totalPage: 10,
    firstReqEnd: false,
    list: []
}
export default {
    components: {
        waterfalls,
        cardSkeleton
    },
    data() {
        return {
            app,
            actionsList,
            actionSheet: false,
            firstReqEnd: false,
            initFinish: false,
            searchText: "",
            navHeight: 0,
            tabsHeight: 0,
            scrollViewHeight: 0,
            fixedTopHeight: 0,
            tabs: {
                index: 1,
                list: [{
                    name: '关注',
                }, {
                    name: '推荐',

                }, {
                    name: 'SHOW卡',

                }, {
                    name: '视频',

                }, {
                    name: '卡册',

                }, {
                    name: '交流',

                }, {
                    name: '篮球',

                }]
            },
            trTimmer: null
        }
    },
    async onLoad() {
        this.$nextTick(async () => {
            this.fixedTopHeight = await this.getDomHeight("#fixedTop")
            console.log(await this.getDomHeight("#tabs"));
            // this.scrollViewHeight = app.platform.systemInfo.screenHeight - this.fixedTopHeight - (uni.getSystemInfoSync().screenHeight - uni.getSystemInfoSync().safeArea.bottom)
            // #ifdef APP-NVUE
            this.scrollViewHeight = app.platform.systemInfo.screenHeight - this.fixedTopHeight - plus.navigator.getSafeAreaInsets().deviceBottom - 56
            console.log(uni.getSystemInfoSync());
            console.log(plus.navigator.getSafeAreaInsets());
            console.log("app.platform.systemInfo.screenHeight:", app.platform.systemInfo.screenHeight);
            console.log("this.fixedTopHeight:", this.fixedTopHeight);
            console.log("uni.getSystemInfoSync().safeArea.bottom", uni.getSystemInfoSync().safeArea.bottom);
            console.log("tabbarHeight:", uni.getSystemInfoSync().screenHeight - uni.getSystemInfoSync().safeArea.bottom);
            console.log("this.scrollViewHeight:", this.scrollViewHeight);
            // #endif
            // #ifdef H5
            this.scrollViewHeight = 666
            // #endif

        })
        await this.initTab()
        this.reqNewData()
    },
    computed: {
        nowTabText() {
            return this.tabs.list[this.tabs.index].queryParams.q
        }
    },
    watch: {
        'tabs.index': function (val) {
            if (this.tabs.list[val].list.length == 0 && !this.tabs.list[val].firstReqEnd) {
                this.tabs.list[val].queryParams.pageIndex = 1
                //请求数据
                this.reqNewData()
            }
            if (val == 2) {
                uni.setTabBarStyle({
                    backgroundColor: "#0c0014"
                })
            } else {
                uni.setTabBarStyle({
                    backgroundColor: "#ffffff"
                })
            }
        }
    },
    methods: {
        async initTab() {
            this.tabs.list.forEach((item, index) => {
                const deepData = JSON.parse(JSON.stringify(defaultTagObj))
                this.$set(this.tabs.list, index, { ...deepData, ...item })
            })
            this.initFinish = true
            return
        },
        pageJump(url) {
            uni.navigateTo({
                url,
                events: {
                    receive: (data) => {
                        const nowTab = this.tabs.list[this.tabs.index]
                        if (nowTab.queryParams.q != data.searchTetxt) {
                            nowTab.firstReqEnd = false
                            nowTab.queryParams.pageIndex = 1
                            nowTab.queryParams.q = data.searchText
                            nowTab.list = []
                            console.log(this.tabs.list[this.tabs.index])
                            setTimeout(() => {
                                this.reqNewData()
                            }, 300)
                        }
                    }
                },
                success: (res) => {
                    res.eventChannel.emit('defaultText', { searchText: this.nowTabText })
                }
            })
        },
        getDomHeight(dom) {
            return new Promise((re, rj) => {
                uni.createSelectorQuery()
                    .select(dom)
                    .boundingClientRect((rect) => {
                        if (rect) {
                            re && re(rect.height)
                        }
                    })
                    .exec();
            })
        },
        goToDetail(item) {
            uni.navigateTo({
                url: "/pages/cardForum/detail?code=" + item.code
            })
        },
        swiperChange(event) {
            // console.log("swiperChange", event);
            this.tabs.index = event.detail.current
        },
        swiperChangeAnimationfinish(event) {
            // console.log("动画结束", event);
        },
        swiperTransition(event) {
            // this.trTimmer && clearTimeout(this.trTimmer)
            // this.trTimmer = setTimeout(() => {
            //     console.log("swiperTransition", event);
            // }, 10)
        },
        tabClick(event) {
            // console.log(event);
            if (event.index == this.tabs.index) return
            this.tabs.index = event.index
        },
        onSelectAction(item) {
            if (item.url) {
                uni.navigateTo({
                    url: item.url
                })
            }
        },
        refreshData(index) {
            const nowTab = this.tabs.list[index]
            nowTab.pageIndex = 1
            this.reqNewData(() => {
                const key = "waterfalls" + index
                setTimeout(() => {
                    this.$refs[key]?.[0]?.hideRefresh?.()
                }, 500)
            })
        },
        loadmoreData(index) {
            const nowTab = this.tabs.list[index]
            if (nowTab.queryParams.pageIndex < nowTab.totalPage) {
                nowTab.queryParams.pageIndex += 1
                this.reqNewData()
            }
        },
        reqNewData(cb) {
            this.tabs.list[this.tabs.index].list.push(...mockList)
            this.tabs.list[this.tabs.index].firstReqEnd = true
            cb && cb()
            return
            const query = this.tabs.list[this.tabs.index].queryParams
            app.http.Get("/dataApi", query, (res) => {
                this.tabs.list[this.tabs.index].firstReqEnd = true
                cb && cb()
            }, (err) => {
                this.tabs.list[this.tabs.index].firstReqEnd = true
            })
        }
    }
}
</script>
<style scoped lang="scss">
$show-lines: 1;

// @import '@/uni_modules/uv-ui-tools/libs/css/variable.scss';
// #ifndef APP-NVUE 
page {
    background-color: #f2f2f2;
}

// #endif 

.content {
    flex-direction: column;
}

/* #ifdef APP-NVUE */
.waterfall-item {
    background: #fff;
    margin-bottom: 14rpx;
}

/* #endif */
.waterfall-item__ft {
    padding: 20rpx;
    background: #fff;




}

.waterfall-item__image {
    width: 300rpx;
}

.fakerView {
    // background-color: red;
    width: 750rpx;
}



.waterfall-item__ft__title {
    margin-bottom: 10rpx;
    line-height: 48rpx;
    font-weight: 700;

    // .value {
    //     font-size: 32rpx;
    //     color: #303133;
    // }
}

/* #ifdef APP-NVUE */
.waterfall-item__ft__desc {
    font-size: 28rpx;
    color: #606266;
}

/* #endif */
.waterfall-item__ft__btn {
    padding: 10rpx 0;
}

.swiperContainer {
    width: 750rpx;
    // background-color: red;
    // flex: 1;
}

.swiperItem {
    // height: 600rpx;
    align-items: center;

    // width: 100%;
}

.fixedTop {
    position: fixed;
    top: 0;
    background-color: #fff;
}

.navBar {
    width: 750rpx;
    // position: fixed;
    // top: 0;
    // z-index: 999;
    background-color: #fff;

}

.scroller {
    width: 750rpx;
    background-color: red;
}

.nav {
    // box-sizing: border-box;
    padding: 20rpx 35rpx;
    display: flex;
    align-items: center;
    flex-direction: row;
    // height: 88rpx;
    justify-content: space-between;
}

.nav_search {
    font-weight: bold;
    height: 50rpx;
    background-color: #fb374e;
    color: #fff;
    width: 100rpx;
    border-radius: 6rpx;
}

.navSearchWrap {
    width: 570rpx;
    height: 60rpx;
    border: 2rpx solid #797979;
    border-radius: 6rpx;
    // box-sizing: border-box;
    display: flex;
    justify-content: space-between;
    padding: 0 10rpx;
    align-items: center;
    flex-direction: row;
}

.navInput {
    color: #000;
    width: 200rpx;
}

.flexCenter {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.hotTopicWrap {
    width: 750rpx;
    padding: 0 20rpx;
    border: 1rpx solid #f2f2f2;
    // background-color: #fff;
    // position: fixed;
    height: 200rpx;
    // position: absolute;
    // top: 0;
}

.hotTopicRow {
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
}

.hotTopicScroll {
    width: 700rpx;
    flex-direction: row;
    display: flex;
    // flex-wrap: nowrap;

}

.scrollTopicWarp {
    flex-direction: row;
    display: flex;
    /* #ifdef H5 */
    white-space: nowrap;
    /* #endif */
}

.topicItem {
    width: 150rpx;
    height: 50rpx;
    background-color: red;
    margin-right: 20rpx;
}
</style>