<template>
    <div class="content" style="display: flex;width: 750rpx;flex-direction: column;align-items: center;">
        <!--  -->
        <swiper :duration="300" :style="{ height: app.platform.systemInfo.screenHeight + 'px' }" v-if="initFinish"
            class="swiperContainer" :current="tabs.index" @change="swiperChange" @transition="swiperTransition"
            @animationfinish="swiperChangeAnimationfinish">
            <swiper-item class="swiperItem" v-for="(tab, tabIndex) in tabs.list">
                <image src="@/static/cardForum/showKaBack.jpg" class="showKaBack" v-if="tabIndex === 2"></image>
                <div style="position:absolute;display:flex;flex-direction:column;align-items:center;"
                    :style="{ height: scrollViewHeight + 'px', top: fixedTopHeight + 'px' }">
                    <cardSkeleton :loading="!tab.firstReqEnd" v-if="!tab.firstReqEnd" />

                    <!-- #ifndef APP-NVUE -->
                    <scroll-view scroll-y="true" :style="{ height: scrollViewHeight + 'px' }"
                        @scrolltolower="loadmoreData(tabIndex)">
                        <view class="hotTopicWrap" v-if="isShowKa && tab.firstReqEnd">
                            <image src="@/static/cardForum/hotCard.png" class="hotTopicWrap_img"></image>
                            <view class="hotTopicRow">
                                <image src="@/static/cardForum/star.png" class="star"></image>
                                <text class="hotTopicRow_title">热门话题</text>
                                <div class="flex1"></div>
                                <text class="hotTopicRow_all" @click="pageJump('/pages/cardForum/topics/list')">全部</text>
                                <u-icon size="24rpx" color="#ffffff" name="arrow-right"></u-icon>
                            </view>
                            <scroll-view scroll-x="true" :show-scrollbar="false" class="hotTopicScroll">
                                <view class="scrollTopicWarp">
                                    <view class="faker_topicItem"></view>
                                    <view class="topicItem" v-for="item in hotTopics" @click="onClickTopic(item)">
                                        <image mode="aspectFill" class="topicItem_img"
                                            :src="parsePic(decodeURIComponent(item.pic))"></image>
                                        <text class="topicItem_title">{{ item.name }}</text>
                                        <text class="topicItem_dt">{{ item.totalUseNum }}篇动态</text>
                                        <text class="topiceActCorner" v-if="item.activity">活动</text>
                                    </view>
                                </view>
                            </scroll-view>
                        </view>
                        <view class="adWrap" v-if="isShowKa && topicAcList && topicAcList.length">
                            <image src="@/static/cardForum/acCard.png" class="adWrap_img"></image>
                            <swiper style="width: 730rpx;">
                                <swiper-item v-for="(item, index) in topicAcList" :key="index"
                                    style="position: relative;width: 730rpx;height:200rpx"
                                    @click="onClickTopicAct($event, item)">
                                    <image :src="parsePic(decodeURIComponent(item.pic))" class="swiperPic"
                                        mode="aspectFill"></image>
                                    <text class="topPushButton" @click="onClickPushTopic($event, item)">我要发布</text>
                                </swiper-item>
                            </swiper>
                        </view>

                        <waterfalls style="width:750rpx;padding-top: 10rpx;" v-if="tab.list.length" v-model="tab.list"
                            :add-time="50" column-count="2" left-gap="10" right-gap="10" column-gap="8" column-width="40"
                            :isFetchEnd="tab.isFetchEnd">
                        </waterfalls>
                        <empty v-if="tab.firstReqEnd && !tab.list.length"></empty>
                    </scroll-view>
                    <!-- #endif -->
                    <!-- #ifdef APP-NVUE -->
                    <waterfalls :needExposure="true" column-count="2" v-if="tab.firstReqEnd" :ref="`waterfalls${tabIndex}`"
                        :height="scrollViewHeight + 'px'" :value="tab.list" @loadmore="loadmoreData(tabIndex)"
                        @refresh="refreshData(tabIndex)" style="padding-top: 10rpx;" :isFetchEnd="tab.isFetchEnd">
                        <template v-slot:header>
                            <header style="align-items: center;" v-if="tabIndex == 2 && tab.firstReqEnd">
                                <div class="hotTopicWrap">
                                    <image src="@/static/cardForum/hotCard.png" class="hotTopicWrap_img"></image>
                                    <div class="hotTopicRow">
                                        <image src="@/static/cardForum/star.png" class="star"></image>
                                        <text class="hotTopicRow_title">热门话题</text>
                                        <div class="flex1"></div>
                                        <text class="hotTopicRow_all"
                                            @click="pageJump('/pages/cardForum/topics/list')">全部</text>
                                        <u-icon size="24rpx" color="#ffffff" name="arrow-right"></u-icon>
                                    </div>
                                    <scroll-view scroll-x="true" :show-scrollbar="false" class="hotTopicScroll">
                                        <view class="faker_topicItem"></view>
                                        <view class="topicItem" v-for="item in hotTopics" @click="onClickTopic(item)">
                                            <image mode="aspectFill" class="topicItem_img"
                                                :src="parsePic(decodeURIComponent(item.pic))"></image>
                                            <text class="topicItem_title">{{ item.name }}</text>
                                            <text class="topicItem_dt">{{ item.totalUseNum }}篇动态</text>
                                            <text class="topiceActCorner" v-if="item.activity">活动</text>
                                        </view>
                                    </scroll-view>
                                </div>
                                <div class="adWrap" v-if="tabIndex === 2 && topicAcList && topicAcList.length">
                                    <image src="@/static/cardForum/acCard.png" class="adWrap_img"></image>
                                    <swiper style="width: 730rpx;width: 730rpx;height:200rpx">
                                        <swiper-item v-for="(item, index) in topicAcList" :key="index"
                                            style="position: relative;" @click="onClickTopicAct($event, item)">
                                            <image :src="parsePic(decodeURIComponent(item.pic))" class="swiperPic"
                                                mode="aspectFill"></image>
                                            <text class="topPushButton" @click="onClickPushTopic($event, item)">我要发布</text>
                                        </swiper-item>
                                    </swiper>
                                </div>
                            </header>
                        </template>
                    </waterfalls>

                    <!-- #endif -->

                </div>

            </swiper-item>
        </swiper>
        <div class="fixedTop" id="fixedTop" :style="{ backgroundColor: `rgba(255,255,255,${isShowKa ? 0 : navOpacity})` }">
            <div class="navBar" id="navBar" ref="navBar">
                <div :style="{ height: app.statusBarHeight + 'px' }"></div>
                <div class="nav">
                    <div class="navSearchWrap" :class="{ navSearchWrap_showka: isShowKa }"
                        @click="pageJump('/pages/cardForum/search')">
                        <input class="navInput" type="text" placeholder="搜你想搜..." disabled
                            @click="pageJump('/pages/cardForum/search')" />
                        <div class="nav_search flexCenter" :class="{ nav_search_showka: isShowKa }"
                            :style="{ backgroundColor: `rgba(250, 21, 69, ${isShowKa ? 0 : navOpacity})` }">
                            <text class="nav_search_text flexCenter">搜索</text>
                        </div>
                    </div>
                    <div class="camera" @click.stop="actionSheet = true">
                        <image v-if="!isShowKa" src="@/static/cardForum/camera.png" class="camera_img"></image>
                        <image v-if="isShowKa" src="@/static/cardForum/showKa_camera.png" class="camera_img">
                        </image>
                        <text class="camera_txt" :style="{ color: isShowKa ? '#ffffff' : '#333333' }">发布</text>
                    </div>
                </div>
            </div>
            <u-tabs style="width: 750rpx;height:" customType="showKa" :duration="300" lineWidth="49rpx" lineHeight="6rpx"
                :itemStyle="{ marginTop: '-10rpx', height: '74rpx' }"
                :activeStyle="{ color: '#333333', fontSize: '27rpx', transform: 'scale(1.22)', fontWeight: 'bold', fontFamily: 'PingFang SC' }"
                :inactiveStyle="{ color: '#959695', fontSize: '27rpx', transform: 'scale(1)', fontFamily: 'PingFang SC' }"
                class="tabs" id="tabs" :current="tabs.index" @click="tabClick" :list="tabs.list" ref="tabs">
                <template v-slot:showKa>
                    <image class="showKaImage" v-if="!isShowKa" src="@/static/cardForum/showKa.png"></image>
                    <image class="showKaImage" v-else src="@/static/cardForum/showKa_select.png"></image>
                </template>
            </u-tabs>
        </div>
        <div class="showKaBottom" ref="showKaBottom" v-if="tabs.index == 2">
            <div class="showKaTabBar">
                <text class="tabbar_item" @click="switchTo('/pages/index/index')">首页</text>
                <text class="tabbar_item" @click="switchTo('/pages/illustration/index')">图鉴</text>
                <text class="tabbar_item tabbar_item_select">卡圈</text>
                <text class="tabbar_item" @click="switchTo('/pages/index/message')">消息</text>
                <text class="tabbar_item" @click="switchTo('/pages/index/userinfo_v3')">我的</text>
            </div>
            <div :style="{ height: bottomSafeArea + 'px' }"></div>
        </div>
        <u-action-sheet :actions="actionsList" cancelText="取消" :show="actionSheet" @select="onSelectAction"
            @close="actionSheet = false"></u-action-sheet>
    </div>
</template>
<script>
// #ifdef APP-NVUE
const animation = uni.requireNativePlugin('animation')
const dom = uni.requireNativePlugin('dom')
// #endif
import waterfalls from "./components/waterfalls.vue"
import cardSkeleton from "./components/cardSkeleton.vue"
import { releaseByTopic, mockList } from "./func/index.js"
import empty from "@/components/empty/empty.vue"
import { Md5 } from "js-md5"
const actionsList = [
    {
        name: "动态",
        url: "/pages/cardForum/release",
        fontWeight: 600
    }, {
        name: "卡册",
        subname: "适用于凑套，需图片与卡种对应上传。",
        url: "/pages/illustration/album/selectCard",
        fontWeight: 600
    }
]
const tabsList = [
    {
        name: '关注',
        tag: 'follow',
        url: 'cardCircle/list/me/follow',
        badge: {
            show: true,
            isDot: true,
            bgColor: "rgba(255, 0, 61,0)"
        }
    }, {
        name: '推荐',
        tag: 'all'
    }, {
        name: 'SHOW卡',
        tag: 'show'
    }, {
        name: '视频',
        tag: 'video'
    }, {
        name: '卡册',
        tag: 'album'
    },
    //  {
    //     name: '交流',
    //     tag: 'swap'
    // }, 
    {
        name: '篮球',
        tag: 'basket'
    },
    {
        name: '足球',
        tag: 'foot'
    },
    {
        name: '影视',
        tag: 'animeTv'
    },
    {
        name: '其他',
        tag: 'rest'
    }
]
const app = getApp().globalData.app;
const defaultTagObj = {
    queryParams: {
        fetchFrom: 1,
        fetchSize: 10,
    },
    // totalPage: 10,
    isFetchEnd: false,
    firstReqEnd: false,
    list: []
}
export default {
    components: {
        waterfalls,
        cardSkeleton,
        empty
    },
    data() {
        return {
            parsePic: getApp().globalData.parsePic,
            app,
            actionsList,
            actionSheet: false,
            firstReqEnd: false,
            initFinish: false,
            searchText: "",
            navHeight: 0,
            tabsHeight: 0,
            scrollViewHeight: 0,
            fixedTopHeight: 0,
            hotTopics: [],
            dx: 0,
            tabs: {
                index: 1,
                list: []
            },
            trTimmer: null,
            bottomSafeArea: 0,
            topicAcList: [
            ],
            oldIndex: 1,
            loadmoreTimer: null
        }
    },
    async onLoad() {
        uni.$on("loginSuccess", this.loginSuccess)
        try {
            await this.initTab()
            await app.user.setViewerId()
            this.reqNewData(true)
        } catch (err) {
            // await this.initTab()
            // this.reqNewData(true)
        }
    },
    beforeDestroy() {
        uni.$off("loginSuccess", this.loginSuccess)
    },
    onShow() {
        this.$nextTick(() => {
            setTimeout(async () => {
                this.fixedTopHeight = await this.getDomHeight("#fixedTop")
                // #ifdef APP-NVUE
                this.bottomSafeArea = plus.navigator.getSafeAreaInsets().deviceBottom
                this.scrollViewHeight = app.platform.systemInfo.screenHeight - this.fixedTopHeight - plus.navigator.getSafeAreaInsets().deviceBottom - 56
                // #endif
                // #ifdef H5
                this.scrollViewHeight = 666
                // #endif
            }, 100)
            if (uni.getStorageSync('showKace')) {
                this.tabs.index = 4;
                uni.removeStorageSync('showKace');
            }
            this.getFollowDot()
        })
        if (this.tabs.index == 2) {
            uni.hideTabBar({ animation: false })
        } else {
            uni.showTabBar({ animation: false })
        }
    },
    computed: {
        current() {
            return this.tabs.list[this.tabs.index]
        },
        isShowKa() {
            return this.tabs.index === 2
        },
        navOpacity() {
            if (this.tabs.index == 1) {
                // if (this.dx == app.platform.systemInfo.screenWidth) return 1
                return (app.platform.systemInfo.screenWidth - this.dx) / app.platform.systemInfo.screenWidth
            }
            if (this.isShowKa) {
                if (this.dx <= app.platform.systemInfo.screenWidth && this.dx >= app.platform.systemInfo.screenWidth - 30) return 0
                // console.log((Math.abs(this.dx)) / app.platform.systemInfo.screenWidth);
                return (Math.abs(this.dx)) / app.platform.systemInfo.screenWidth
            }
            if (this.tabs.index === 3 && this.dx < 0) {
                if (this.dx == -app.platform.systemInfo.screenWidth) return 1
                return (app.platform.systemInfo.screenWidth - Math.abs(this.dx)) / app.platform.systemInfo.screenWidth
            } else {
                return 1
            }

        }

    },
    watch: {
        'tabs.index': {
            immediate: true,
            handler(val) {
                if (this.tabs.list[val]?.list && (this.tabs.list[val].list.length == 0)) {
                    this.reqNewData(true)
                }
                if (val == 0) {
                    this.tabs.list[0].badge.bgColor = `rgba(255, 0, 61,0)`
                }
                if (val == 2) {
                    this.reqTopicAc()
                    uni.hideTabBar({
                        animation: false,
                        success: () => {
                            plus.navigator.setStatusBarStyle("light");
                        }
                    })

                    if (!this.hotTopics.length) this.getTopicsList()
                } else {
                    // #ifdef APP-NVUE
                    const ref = this.$refs['showKaBottom']
                    const duration = 0
                    animation.transition(ref, {
                        styles: {
                            opacity: `0`
                        },
                        duration
                    })
                    // #endif
                    uni.showTabBar({ animation: false })
                    // #ifdef APP-NVUE
                    plus.navigator.setStatusBarStyle("dark");
                    // #endif
                }
            }
        },
        actionSheet: function (val) {
            if (val) {
                uni.hideTabBar({ animation: false })
            } else {
                setTimeout(() => {
                    uni.showTabBar({ animation: false })
                }, 300)
            }
        }
    },
    methods: {
        async initTab() {
            tabsList.forEach((item, index) => {
                const deepData = JSON.parse(JSON.stringify(defaultTagObj))
                this.$set(this.tabs.list, index, { ...deepData, ...item })
            })
            this.initFinish = true
            return
        },
        async loginSuccess() {
            await app.user.setViewerId()
            this.reqNewData(true)
            this.getFollowDot()
        },
        getFollowDot() {
            if (!app.token.accessToken) {
                this.tabs.list[0].badge.bgColor = `rgba(255, 0, 61,0)`
                return
            }
            app.http.Get(`dataApi/cardCircle/me/infor`, {}, (res) => {
                if (this.tabs.index == 0) {
                    this.tabs.list[0].badge.bgColor = `rgba(255, 0, 61,0)`
                    return
                }
                this.tabs.list[0] && (this.tabs.list[0].badge.bgColor = `rgba(255, 0, 61,${res.data.isFollow ? 1 : 0})`)
            })
        },
        getTopicsList() {
            app.http.Get("dataApi/cardCircle/topic/list", { fetchFrom: 1, fetchSize: 15, od: "issue_72:asc" }, (res) => {
                this.hotTopics = res.list || []
            })
        },
        pageJump(url) {
            uni.navigateTo({
                url
            })
        },
        getDomHeight(dom) {
            return new Promise((re, rj) => {
                uni.createSelectorQuery()
                    .select(dom)
                    .boundingClientRect((rect) => {
                        if (rect) {
                            re && re(rect.height)
                        }
                    })
                    .exec();
            })
        },
        goToDetail(item) {
            this.pageJump("/pages/cardForum/detail?code=" + item.code)
        },
        clearSeach() {
            this.current.queryParams.q = ""
        },
        swiperChange(event) {
            console.log("swiperChangeChange了了了");
            this.tabs.index = event.detail.current
            // setTimeout(() => {
            //     this.dx = 0
            // }, 10)
        },
        transitionend(event) {
            console.log("66666666", event);
        },
        swiperChangeAnimationfinish(event) {
            this.dx = 0
        },
        swipertouchmove(event) {
        },
        swiperTransition(event) {
            this.dx = event.detail.dx
        },
        tabClick(event) {
            // console.log(event);
            if (event.index == this.tabs.index) return
            this.tabs.index = event.index
        },
        onSelectAction(item) {
            setTimeout(() => {
                uni.showTabBar({ animation: false })
            }, 300)
            if (app.token.accessToken == '') {
                uni.navigateTo({ url: '/pages/login/login' })
                return;
            }
            if (item.url) {
                uni.navigateTo({
                    url: item.url
                })
            }
        },
        switchTo(url) {
            uni.switchTab({
                url,
                success: (res) => {
                    uni.showTabBar({ animation: false })
                }
            })
        },
        refreshData(index) {
            console.log("刷新数据", this.current.isFetchEnd);
            setTimeout(() => {
                // if (this.current.isFetchEnd) {
                //     setTimeout(() => {
                //         this.$refs['waterfalls' + index][0].hideRefresh()
                //     }, 200);
                // } else {
                //     this.current.queryParams.fetchFrom = 1
                //     this.reqNewData(true, (() => {
                //         setTimeout(() => {
                //             this.$refs['waterfalls' + index][0].hideRefresh()
                //         }, 200);
                //     }))
                // }
                this.current.queryParams.fetchFrom = 1
                this.reqNewData(true, (() => {
                    setTimeout(() => {
                        this.$refs['waterfalls' + index][0].hideRefresh()
                    }, 200);
                }))
            }, 1000)
        },
        loadmoreData(index) {
            this.loadmoreTimer && clearTimeout(this.loadmoreTimer)
            this.loadmoreTimer = setTimeout(() => {
                if (!this.current.isFetchEnd) {
                    this.current.queryParams.fetchFrom += this.current.queryParams.fetchSize
                    this.reqNewData()
                }
            }, 300)
        },
        onClickTopic(item) {
            releaseByTopic(item.id)
        },
        onClickTopicAct(event, item) {
            this.pageJump(`/pages/cardForum/topics/act?id=${item.id}`)
        },
        onClickPushTopic(event, item) {
            // #ifdef APP-NVUE
            event.stopPropagation();
            // #endif
            this.onClickTopic(item)
            // this.pageJump(`/pages/cardForum/topics/act?id=${item.id}`)
        },
        reqTopicAc() {
            app.http.Get(`dataApi/cardCircle/topic/banner/list`, {}, (res) => {
                this.topicAcList = res.list || []
            })
        },
        reqNewData(isRefresh = false, cb) {
            let query = {
                tag: this.current.tag
            }
            const array = ["all", "album"]
            if (!array.includes(this.current.tag)) {
                query = {
                    ...this.current.queryParams,
                    ...query
                }
                if (isRefresh) {
                    delete query.scrollId
                    delete query.st
                    delete query.sn
                    query.flush = 1
                }
                if (query.scrollId && query.st) {
                    query.sn = Md5.hashStr(`${query.st}_${query.scrollId}_scrollSearchTujian`)
                }
            }
            const url = array.includes(this.current.tag) ? `dataApi/${this.current.url || "cardCircle/roll"}` : `dataApi/${this.current.url || "cardCircle/list"}`
            console.log("请求的", url, query);
            app.http.Get(url, query, (res) => {
                console.log("响应的结果", res);
                let list = res.list || []
                // #ifdef APP-NVUE
                list = (res.list || []).map(item => {
                    item.cover = this.parsePic(decodeURIComponent(item.cover))
                    return item
                })
                // #endif
                this.current.isFetchEnd = res.isFetchEnd
                if (res.scrollId) this.current.queryParams.scrollId = res.scrollId
                if (res.st) this.current.queryParams.st = res.st
                if (isRefresh) {
                    this.current.list = []
                }
                this.current.list.push(...list)
                this.current.firstReqEnd = true
                cb && cb()
            }, (err) => {
                this.current.firstReqEnd = true
            })
        }
    }
}
</script>
<style scoped lang="scss">
$show-lines: 1;

// @import '@/uni_modules/uv-ui-tools/libs/css/variable.scss';
// #ifndef APP-NVUE 
page {
    background-color: #f2f2f2;
}

// #endif 
.flex1 {
    flex: 1;
}

.content {
    flex-direction: column;
}

.fakerView {
    // background-color: red;
    width: 750rpx;
}


.swiperContainer {
    width: 750rpx;
    position: fixed;
    top: 0;
}

.showKaBack {
    width: 750rpx;
    height: 1980rpx;
    position: absolute;
    top: 0;
    // transition-property: opacity;
    // transition-duration: 0.2s;
}

.swiperItem {
    align-items: center;
    position: absolute;
}

.fixedTop {
    position: fixed;
    top: 0;
    background-color: #fff;
    padding-bottom: 8rpx;
    z-index: 99;
}

.navBar {
    width: 750rpx;
    // position: fixed;
    // top: 0;
    // z-index: 999;
    // background-color: #fff;

}

.scroller {
    width: 750rpx;
    background-color: red;
}

.nav {
    // box-sizing: border-box;
    // padding: 20rpx 35rpx;
    padding: 0rpx 33rpx 0 20rpx;
    height: 104rpx;
    // padding-top: 16rpx;
    display: flex;
    align-items: center;
    flex-direction: row;
    // height: 88rpx;
    justify-content: space-between;
}

.nav_search {
    width: 98rpx;
    height: 49rpx;
    background: #FA1545;
    border-radius: 5rpx;

}

.nav_search_showka {
    // background-color: rgba(250, 21, 69, 0);
    border-left: 3rpx solid #ffffff;
    border-radius: 0rpx;
}

.nav_search_text {
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: bold;
    line-height: 49rpx;
    color: #FFFFFF;
}

.search-icon {
    width: 31rpx;
    height: 31rpx;
    margin: 0 10rpx;
    margin-right: 16rpx;
    // position: relative;
    background-color: #dbdbdb;
    // right: 20rpx;
    border-radius: 50%;
}

.search-remove {
    width: 15rpx;
    height: 14rpx;

}

.camera {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    height: 78rpx;
}

.camera_img {
    width: 53rpx;
    height: 40rpx;
    position: relative;
    top: 7rpx;
}

.camera_txt {
    font-size: 19rpx;
    font-family: PingFang SC;
    font-weight: 500;
    color: #333333;
    position: relative;
    // top: 4rpx;
}

.navSearchWrap {
    width: 614rpx;
    height: 73rpx;
    border: 3rpx solid #333333;
    border-radius: 5rpx;
    // box-sizing: border-box;
    display: flex;
    justify-content: space-between;
    padding: 0 10rpx;
    align-items: center;
    flex-direction: row;
}

.navSearchWrap_showka {
    border: 3rpx solid #ffffff;
}

.navInput {
    color: #000;
    // width: 400rpx;
    flex: 1;
    // background-color: red;
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: 400;
    padding: 0 10rpx;
    // color: #C0C0C0;
}

.flexCenter {
    display: flex;
    justify-content: center;
    align-items: center;
}

.hotTopicWrap {
    width: 740rpx;
    // padding: 0 20rpx;
    height: 303rpx;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.hotTopicWrap_img {
    position: absolute;
    width: 740rpx;

    height: 303rpx;
    top: 0;
    left: 0;
}

.hotTopicRow {
    flex-direction: row;
    // justify-content: space-between;
    align-items: center;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    width: 740rpx;
    padding: 0 38rpx;
    margin-top: 31rpx;
}

.star {
    width: 28rpx;
    height: 26rpx;
    margin-right: 10rpx;
}

.hotTopicRow_title {
    font-size: 27rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #FFFFFF;
}

.hotTopicRow_all {
    font-size: 21rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #FFFFFF;
    margin-right: 14rpx;
}

.hotTopicScroll {
    width: 710rpx;
    flex-direction: row;
    display: flex;
    margin-top: 32rpx;
    // flex-wrap: nowrap;

}

.scrollTopicWarp {
    flex-direction: row;
    display: flex;
    width: 710rpx;
    flex-wrap: nowrap;
    // #ifndef APP-NVUE
    white-space: nowrap;
    // #endif
}

.faker_topicItem {
    width: 40rpx;
    opacity: 0;
}

.topiceActCorner {
    width: 52rpx;
    height: 23rpx;
    background: #FA1545;
    border-radius: 1rpx;
    position: absolute;
    top: 0;
    left: 0;
    font-size: 17rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #FFFFFF;
    text-align: center;
    line-height: 23rpx;

}

.topicItem {
    width: 101rpx;
    height: 200rpx;
    // background-color: #ffffff;
    margin-right: 60rpx;
    // border-radius: 1rpx;
    position: relative;
}

.topicItem_img {
    width: 101rpx;
    height: 101rpx;
    border-radius: 1rpx;
    background-color: #ffffff;
    border-radius: 5rpx;
}

.topicItem_title_wrap {
    width: 101rpx;
    // height: 30rpx;

    background-color: red;
}

.topicItem_title {
    font-size: 21rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #FFFFFF;
    text-align: center;
    width: 101rpx;
    margin-top: 10rpx;
    // #ifdef APP-NVUE
    lines: 1;
    text-overflow: ellipsis;
    // #endif

}

.topicItem_dt {
    width: 101rpx;
    text-align: center;
    font-size: 19rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #C0C0C0;
    margin-top: 6rpx;
}

.adWrap {
    width: 740rpx;
    height: 208rpx;
    margin-bottom: 8rpx;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    border-radius: 5rpx;
}

.topPushButton {
    width: 168rpx;
    height: 57rpx;
    background: #FA1545;
    border-radius: 5rpx;

    right: 50rpx;
    top: 74rpx;
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #FFFFFF;
    text-align: center;
    line-height: 57rpx;
    position: absolute;
}

.adWrap_img {
    position: absolute;
    width: 740rpx;
    height: 208rpx;
    top: 0;
    left: 0;
    border-radius: 5rpx;
}

.swiperPic {
    width: 730rpx;
    height: 200rpx;
    border-radius: 5rpx;
    // position: absolute;
    // left: 0;
    // top:0;
}

.showKaImage {
    width: 153rpx;
    height: 35rpx;
}

.showKaBottom {
    position: fixed;
    bottom: 0;
    background-color: #000000;
    width: 750rpx;
}

.showKaTabBar {
    width: 750rpx;
    height: 56px;
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    // justify-content: space-evenly;
    align-items: center;
}

.tabbar_item {
    // width: 25%;
    font-size: 31rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #aaaaaa;
    text-align: center;
}

.tabbar_item_select {
    color: #FFFFFF;
}
</style>