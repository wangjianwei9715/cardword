<template>
    <list fixFreezing="true" bounce="false" id="pageId" @scroll="scroll">
        <cell>
            <div id="topContainer" style="flex-direction: column;align-items: center;display: flex;">
                <div style="flex-direction: column;align-items: center;display: flex;background-color: #fff">
                    <div :style="{ height: navHeight + 'px' }"></div>
                    <view class="topicsItem">
                        <image class="topicsItem_img" :src="decodeURIComponent(data.pic)">
                        </image>
                        <view class="rightInfo">
                            <view style="display: flex;flex-direction: row;">
                                <text class="topicsItem_title" style="flex: 1;">#{{ data.name || "获取中" }}</text>
                                <text class="followButton" :class="{ followButton_dis: data.isFollow }"
                                    @click="followTopicAction">{{ data.isFollow ? '已关注' : '关注' }}</text>
                                <!-- <text class="act">活动</text> -->
                            </view>
                            <!-- #ifdef APP-NVUE -->
                            <text class="desc">{{ data.intro }}</text>
                            <!-- #endif -->
                            <!-- #ifndef APP-NVUE -->
                            <text class="desc u-line-2">{{ data.intro }}</text>
                            <!-- #endif -->
                            <view class="flex1"></view>
                            <view class="bottomInfo">
                                <!-- formatNumber(data.totalUseNum, 2) -->
                                <text class="num">{{ data.totalUseNum }}篇动态</text>
                                <!-- <view class="flex1"></view> -->
                                <!-- <text class="push flexCenter" @click="release">发布</text> -->
                            </view>
                        </view>
                    </view>
                    <view class="line"></view>
                    <div style="background-color: #fff;height:100rpx" id="tabs">
                        <u-tabs customType="cardForum" @click="tabClick" :duration="300" :current="tabs.index"
                            :list="tabs.list"></u-tabs>
                    </div>
                    <div class="acWrap" id="acWrap" v-if="data.banner" @click="goToAct">
                        <image class="acImage" mode="aspectFill" :src="parsePic(decodeURIComponent(data.banner))"></image>
                        <text class="iNeedPush" @click.stop="release">我要发布</text>
                    </div>
                </div>

            </div>
            <swiper style="position: relative;" :current="tabs.index" :style="{ height: scrollViewHeight + 'px' }"
                @change="swiperChange">
                <swiper-item v-for="(tab, tabIndex) in tabs.list">
                    <waterfalls :ref="`waterfalls${tabIndex}`" :value="tab.list" :refresh="false"
                        :always-scrollable-vertical="true" @loadmore="loadmore">
                    </waterfalls>
                </swiper-item>
            </swiper>
        </cell>
        <cell :style="{ height: acWrapHeight + 'px' }"></cell>
        <div v-if="stickyTabs" :style="{ top: navHeight + 'px', opacity: stickyTabs ? 1 : 0 }"
            style="position: fixed;background-color: #fff;width: 750rpx;height:100rpx;align-items: center;">
            <u-tabs @click="tabClick" customType="cardForum" :duration="300" :current="tabs.index"
                :list="tabs.list"></u-tabs>
        </div>
        <transitionNav title=" " ref="transitionNav" @getNavHeight="getNavHeight"></transitionNav>
    </list>
</template>
<!--  -->
<script>
import transitionNav from "@/components/transitionNav/transitionNav"
import waterfalls from "../components/waterfalls.vue"
import { releaseByTopic, formatNumber, mockList, followTopic } from "../func/index"
const app = getApp().globalData.app;
const ACMARGIN = uni.upx2px(20)
const mineTabs = [
    {
        name: '热门',
        url: "cardCircle/list/me/dongtai",
        od: "hot"
    },
    {
        name: '最新',
        url: "cardCircle/list/me/kace",
        od: "fresh"
    }
]
const defaultTagObj = {
    isFetchEnd: false,
    firstReqEnd: false,
    queryParams: {
        fetchFrom: 1,
        fetchSize: 15,
        topicId: 0,
        scrollId: 0,
        st: 0,
        sn: ""
    },
    list: []
}
export default {
    name: '',
    components: {
        transitionNav,
        waterfalls
    },
    mixins: [],
    props: {

    },
    data() {
        return {
            app,
            parsePic: getApp().globalData.parsePic,
            formatNumber,
            navHeight: 0,
            scrollViewHeight: 0,
            stickyTabs: false,
            topHeight: 0,
            tabsHeight: 0,
            acWrapHeight: 0,
            listSetSpecialEffectsHeight: 0,
            tabs: {
                index: 0,
                list: []
            },
            list: [],
            id: 0,
            data: {}
        }
    },
    computed: {
        tabsType() {
            return { top: 0 + 'px' }
        },
        current() {
            return this.tabs.list[this.tabs.index]
        }
    },
    watch: {
        "tabs.index": function (val) {
            if (this.tabs.list[val]?.list && (this.tabs.list[val].list.length == 0)) {
                this.reqData(true)
            }
            this.listSetSpecialEffects(this.tabs.index)
        }
    },
    mounted() {
    },
    onLoad(query) {
        this.id = +query.id
        this.reqNewData()
        // this.$nextTick(async () => {

        // })
    },
    methods: {
        getNavHeight(height) {
            this.navHeight = height
            this.$refs.transitionNav && this.$refs.transitionNav.setPageScroll({
                scrollTop: 600
            })
            // console.log(height);
            setTimeout(() => {
                this.$nextTick(async () => {
                    this.topHeight = await this.getDomHeight("#topContainer")
                    this.acWrapHeight = await this.getDomHeight("#acWrap")
                    this.tabsHeight = await this.getDomHeight("#tabs")
                    // #ifdef APP-PLUS
                    this.scrollViewHeight = app.platform.systemInfo.screenHeight - this.navHeight - this.tabsHeight
                    // #endif
                    // #ifdef H5
                    this.scrollViewHeight = app.platform.systemInfo.screenHeight
                    // #endif
                    this.initTab()
                })
            }, 100)
        },
        tabClick(event) {
            // console.log(event);
            if (event.index == this.tabs.index) return
            this.tabs.index = event.index
        },
        goToAct() {
            uni.navigateTo({
                url: "/pages/cardForum/topics/act?id=" + this.id
            })
        },
        initTab() {
            let mineTabsDeep = uni.$u.deepClone(mineTabs);
            mineTabsDeep.forEach((item, index) => {
                this.$set(this.tabs.list, index, { ...uni.$u.deepClone(defaultTagObj), ...item })
            })
            console.log(this.tabs);
            this.reqData(true)
        },
        release(event) {
            // #ifdef APP-NVUE
            event.stopPropagation();
            // #endif
            releaseByTopic(this.id)
        },
        followTopicAction(event) {
            followTopic(this.id,this.data.isFollow).then(() => {
                this.data.isFollow = !this.data.isFollow
            })
        },
        // listSetSpecialEffects(refKey) {
        //     this.$refs[refKey] && this.$refs[refKey].swiperChange("pageId", this.topHeight - this.acWrapHeight - plus.navigator.getSafeAreaInsets().deviceBottom)
        // },
        listSetSpecialEffects(index) {
            this.$nextTick(() => {
                console.log(this.navHeight);
                console.log(this.topHeight);
                console.log(this.tabsHeight);
                console.log(this.userInfoWrapHeight);
                this.$refs[`waterfalls${index}`] && this.$refs[`waterfalls${index}`][0].swiperChange("pageId", this.topHeight - this.acWrapHeight - plus.navigator.getSafeAreaInsets().deviceBottom)
            })
        },
        swiperChange(event) {
            this.tabs.index = event.detail.current
        },
        async scroll(event) {
            //想要渐变导航栏就用下面的代码

            // console.log(-event.contentOffset.y);
            const dom = await this.getDomInfo("#tabs")
            // console.log(dom.top);
            // if (this.stickyTabs) return
            this.stickyTabs = dom.top <= this.navHeight
        },
        pageJump(url) {
            uni.navigateTo({
                url: url
            })
        },
        loadmore() {
            // this.reqData(false)
            // this.list.push(...this.list)
        },
        refresh() {
            setTimeout(() => {
                this.$refs.waterfall.hideRefresh()
            }, 500)
        },
        getDomHeight(dom) {
            return new Promise((re, rj) => {
                uni.createSelectorQuery()
                    .select(dom)
                    .boundingClientRect((rect) => {
                        if (rect) {
                            re && re(rect.height)
                        }
                    })
                    .exec();
            })
        },
        getDomInfo(dom) {
            return new Promise((re, rj) => {
                uni.createSelectorQuery()
                    .select(dom)
                    .boundingClientRect((rect) => {
                        if (rect) {
                            re && re(rect)
                        }
                    })
                    .exec();
            })
        },
        reqNewData() {
            app.http.Get("dataApi/cardCircle/topic/detail/" + this.id, {}, (res) => {
                this.data = res.data
            })
        },
        reqData(isRefresh = false, cb) {
            //------------mock------------
            this.current.firstReqEnd = false
            if (isRefresh) {
                this.current.list = []
                // this.$refs['waterfalls' + this.tabs.index] && (this.$refs['waterfalls' + this.tabs.index][0].tempList = [])
            }
            this.current.list.push(...uni.$u.randomArray(mockList))
            this.current.firstReqEnd = true
            this.listSetSpecialEffects(this.tabs.index)
            cb && cb()
            //------------mock------------
            app.http.Get(`dataApi/cardCircle/search/dt`, this.current.queryParams, (res) => {
                const list = res.list || []
                this.current.firstReqEnd = true
                this.current.isFetchEnd = res.isFetchEnd
                if (isRefresh) {
                    this.current.list = []
                    this.$refs['waterfalls' + this.tabs.index] && (this.$refs['waterfalls' + this.tabs.index][0].tempList = [])
                }
                this.current.list.push(...list)
                this.current.firstReqEnd = true
                if (this.current.fetchFrom == 1) this.listSetSpecialEffects(this.tabs.index)
                cb && cb()
            }, (err) => {
                this.current.firstReqEnd = true
            })
        }
    }
};
</script>
<style lang='scss'>
.flex1 {
    flex: 1;
}

.userInfoWrap {
    width: 750rpx;
    height: 400rpx;
    // position: relative;
    flex-direction: column;
    align-items: center;
    display: flex;
    background-color: red;
}

.fixImg {
    position: fixed;
    width: 750rpx;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    z-index: 0;
}

.userInfo {
    z-index: 1;
    width: 600rpx;
    display: flex;
    flex-direction: row;
    // background-color: red;
}

.userInfo_avatar {
    width: 100rpx;
    height: 100rpx;
    border-radius: 50%;
}

.stickyHeader {
    position: sticky;
    // top: 0;
    // background-color: #fff;
}

.userInfo_msg {
    flex: 1;
    flex-direction: column;
}

.line {
    width: 683rpx;
    height: 1rpx;
    background: #E6E6E6;
    margin-top: 26rpx;
}

.topicsItem {
    width: 750rpx;
    height: 161rpx;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    display: flex;
    align-items: center;
    margin-bottom: 40rpx;
    flex-direction: row;
    padding: 0 35rpx;
    margin-top: 26rpx;
}

.topicsItem_img {
    width: 161rpx;
    height: 161rpx;
    // background-color: red;
    border-radius: 3rpx;
    margin-right: 46rpx;
}

.rightInfo {
    height: 161rpx;
    flex: 1;
    display: flex;
    flex-direction: column;
    // background-color: red;


}

.topicsItem_title {
    font-size: 33rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #333333;
    margin-right: 14rpx;
}

.followButton {
    width: 122rpx;
    height: 51rpx;
    background: #FA1545;
    border-radius: 3rpx;
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: bold;
    text-align: center;
    line-height: 51rpx;
    color: #FFFFFF;
    border: 1rpx solid #FA1545;
}

.followButton_dis {
    background-color: #ffffff;
    border: 1rpx solid #C0C0C0;
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #C0C0C0;
}

.desc {
    font-size: 21rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #959695;
    // width: 500rpx;
    // #ifdef APP-NVUE
    lines: 2;
    text-overflow: ellipsis;
    // #endif
    // flex: 1;
}

.num {
    color: #aaaaaa;
}





.act {
    width: 71rpx;
    height: 32rpx;
    background: #FA1545;
    border-radius: 3rpx;
    text-align: center;
    font-size: 20rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #FFFFFF;
    line-height: 32rpx;
}

.bottomInfo {
    // width: 100%;
    // width: 500rpx;
    // background-color: red;
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    flex-direction: row;
}

.num {
    font-size: 21rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #C0C0C0;
}

.push {
    // width: 40rpx;
    // height: 20rpx;
    width: 109rpx;
    height: 51rpx;
    background: #FA1545;
    border-radius: 3rpx;
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #FFFFFF;
    text-align: center;
    line-height: 51rpx;
}

.acWrap {
    width: 730rpx;
    height: 200rpx;
    background: #415459;
    border-radius: 5rpx;
    margin-top: 10rpx;
    margin-bottom: 10rpx;
    position: relative;
}

.acImage {
    position: absolute;
    left: 0;
    top: 0;
    width: 730rpx;
    height: 200rpx;
}

.iNeedPush {
    width: 168rpx;
    height: 57rpx;
    background: #FA1545;
    border-radius: 3rpx;
    position: absolute;
    top: 75rpx;
    right: 48rpx;
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: bold;
    text-align: center;
    line-height: 57rpx;
    color: #FFFFFF;
}
</style>