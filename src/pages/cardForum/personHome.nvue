<template>
    <list  bounce="false" id="pageId" ref="pageList" @scroll="scroll" :show-scrollbar="false"
        @touchstart="listTouch" @touchend="listTouch" @touchmove="listTouchMove">
        <cell>
            <div id="topContainer">
                <div class="userInfoWrap" id="userInfoWrap">
                    <div class="fakeTop" :style="{ height: navHeight + 'px' }"></div>
                    <div class="userInfo">
                        <image class="userInfo_avatar" mode="aspectFill"
                            :src="userInfo.avatar ? parsePic(decodeURIComponent(userInfo.avatar)) : defaultAvatar">
                        </image>
                        <div class="userInfo_msg">
                            <div class="userInfo_name">
                                <text class="userInfo_name_text">{{ userInfo.userName }}</text>
                                <text class="userInfo_name_title" v-if="userInfo.title">{{ userInfo.title }}</text>
                            </div>
                            <div class="userInfo_ip">
                                <text class="userInfo_ip_text">IP属地：{{ userInfo.location || '未知' }}</text>
                            </div>
                        </div>
                    </div>
                    <div class="descWrap" v-if="userInfo.sign">
                        <text class="desc_text">{{ userInfo.sign }}</text>
                    </div>
                    <div class="userDataWrap">
                        <div class="userData_data">
                            <div class="userData_item">
                                <text class="userData_num">{{ userInfo.fans || 0 }}</text>
                                <text class="userData_name">粉丝</text>
                            </div>
                            <div class="userData_item">
                                <text class="userData_num">{{ userInfo.follow || 0 }}</text>
                                <text class="userData_name">关注</text>
                            </div>
                            <div class="userData_item">
                                <text class="userData_num">{{ userInfo.like || 0 }}</text>
                                <text class="userData_name">点赞/收藏</text>
                            </div>
                        </div>
                        <div class="flex1"></div>
                        <text class="userData_follow" :class="{ userData_follow_dis: userInfo.isFollow }"
                            @click="onClickFollow" v-if="!isMine">{{
                                userInfo.isFollow ? '已关注' :
                                '关注' }}</text>
                        <text class="userData_edit" v-else @click="pageJump('/pages/userinfo/user_info_v3')">编辑资料</text>
                    </div>
                </div>
                <div class="gundonDiv" ref="gundonDiv"></div>
                <div style="background-color: #fff;" id="tabs" class="tabsWrap" ref="tabsWrap">
                    <u-tabs customType="cardForum" style="width:750rpx" :itemStyle="{ width: `150rpx`, height: `80rpx` }"
                        :activeStyle="{ color: '#333333', fontSize: '33rpx', fontWeight: 'bold', fontFamily: 'PingFang SC' }"
                        :inactiveStyle="{ color: '#959695', fontSize: '27rpx', fontFamily: 'PingFang SC' }" class="tabs"
                        :current="tabs.index" @click="tabClick" :list="tabs.list" ref="tabs"></u-tabs>
                </div>
            </div>
            <swiper :current="tabs.index" :style="{ height: scrollViewHeight + 'px' }" @change="swiperChange"
                style="margin-top: 10rpx;">
                <swiper-item style="width:750rpx" v-for="(tab, tabIndex) in tabs.list">
                    <waterfalls :viewUserId="userId" :showBottom="tab.name != '中卡'" :detailBack="true" :isMine="isMine"
                        :showUser="false" :ref="`waterfalls${tabIndex}`" @scroll="waterScroll" :value="tab.list"
                        :refresh="false" @loadmore="loadmore" :showEmpty="!isMine">
                        <template v-slot:cell v-if="tab.name == '动态' || tab.name == '卡册' && isMine">
                            <cell class="draftWrap" v-if="tab.name == '动态' && draftListByDynamic.length"
                                @click="pageJump('/pages/cardForum/draftList')">
                                <image class="draftWrapImage" v-if="draftListByDynamic[0].data.cover"
                                    :src="decodeURIComponent(draftListByDynamic[0].data.cover)" mode="aspectFill">
                                </image>
                                <div class="shadow">
                                    <image class="caogaoIcon" src="@/static/cardForum/caogao_white.png"></image>
                                    <text class="caogaoTitle">草稿箱</text>
                                    <text class="caogaoText">有{{ draftListByDynamic.length }}篇动态待发布</text>
                                </div>
                            </cell>
                            <cell class="draftWrap" v-if="tab.name == '卡册' && draftListByCardBook.length"
                                @click="pageJump('/pages/cardForum/draftList')">
                                <image class="draftWrapImage" v-if="draftListByCardBook[0].data.cover"
                                    :src="decodeURIComponent(draftListByCardBook[0].data.cover)" mode="aspectFill">
                                </image>
                                <div class="shadow">
                                    <image class="caogaoIcon" src="@/static/cardForum/caogao_white.png"></image>
                                    <text class="caogaoTitle">草稿箱</text>
                                    <text class="caogaoText">有{{ draftListByCardBook.length }}篇动态待发布</text>
                                </div>
                            </cell>
                        </template>
                    </waterfalls>
                </swiper-item>
            </swiper>
        </cell>
        <transitionNav :needIconShadow="false" :needRightTools="['分享']" ref="transitionNav" :title="userInfo.userName"
            @getNavHeight="getNavHeight" :report="!isMine"
            @report="pageJump(`/pages/cardForum/report?byInformer=${this.userInfo.userId}&source=4`)"></transitionNav>
    </list>
</template>
<!--  -->
<script>
// #ifdef APP-NVUE
const dom = weex.requireModule('dom')
// #endif
import transitionNav from "@/components/transitionNav/transitionNav"
import waterfalls from "./components/waterfalls.vue"
import { mockList, getDraftList, followActionByUser } from "./func/index.js"
const app = getApp().globalData.app;
let waterY = -5
let agoListY = 0
const mineTabs = [
    {
        name: '动态',
        url: "cardCircle/list/me/dongtai"
    },
    {
        name: '卡册',
        url: "cardCircle/list/me/kace"
    },
    {
        name: '收藏',
        url: "cardCircle/list/me/collect"
    },
    {
        name: '赞过',
        url: "cardCircle/list/me/like"
    },
    {
        name: '足迹',
        url: "cardCircle/list/me/track"
    }
]
const otherTabs = [
    {
        name: '动态',
        url: "cardCircle/list/user/dongtai/"
    },
    {
        name: '卡册',
        url: "cardCircle/list/user/kace/"
    },
    {
        name: '中卡',
        url: "cardCircle/user/hit/card/list/"
    },
]
const defaultTagObj = {
    isFetchEnd: false,
    firstReqEnd: false,
    queryParams: {
        fetchFrom: 1,
        fetchSize: 15,
        // pageSize: 10,//中卡才有效
        scrollId: "",//中卡才有效
        q: ""
    },
    list: []
}
export default {
    name: '',
    components: {
        transitionNav,
        waterfalls
    },
    mixins: [],
    props: {

    },
    data() {
        return {
            parsePic: getApp().globalData.parsePic,
            app,
            navHeight: 0,
            scrollViewHeight: 0,
            stickyTabs: false,
            tabsHeight: 0,
            userInfoWrapHeight: 0,
            topHeight: 0,
            onTouch: false,
            defaultAvatar: app.defaultAvatar,
            userInfo: {},
            tabs: {
                index: 0,
                list: []
            },
            list: [
                ...mockList
            ],
            userId: 0,
            isMine: false,
            draftListByDynamic: [],
            draftListByCardBook: []
        }
    },
    computed: {
        current() {
            return this.tabs.list[this.tabs.index]
        }
    },
    watch: {
        "tabs.index": function (val) {
            if (this.tabs.list[val]?.list && (this.tabs.list[val].list.length == 0)) {
                this.reqData(true)
            }
            this.listSetSpecialEffects(this.tabs.index)
        }
    },
    mounted() {
    },
    onShow() {
        if (this.isMine) {
            this.draftListByDynamic = getDraftList("dynamic", this.userId)
            // console.log("this.draftListByDynamicthis.draftListByDynamicthis.draftListByDynamic", this.draftListByDynamic);
            this.draftListByCardBook = getDraftList("cardBook", this.userId)
        }
        // this.listSetSpecialEffects(this.tabs.index)
        // this.$refs.goTopRef()
    },
    onLoad(query) {
        if (query.tabIndex) this.tabs.index = +query.tabIndex
        this.userId = +query.userId
        this.isMine = query.isMine == "1" //后续解除注释

        // console.log(this.draftList);

    },
    methods: {
        getNavHeight(height) {
            this.navHeight = height
            this.getUserInfo()
        },
        tabClick(event) {
            // console.log(event);
            if (event.index == this.tabs.index) return
            this.tabs.index = event.index
        },
        initTab() {
            if (this.isMine) {
                let mineTabsDeep = uni.$u.deepClone(mineTabs);
                mineTabsDeep.forEach((item, index) => {
                    this.$set(this.tabs.list, index, { ...uni.$u.deepClone(defaultTagObj), ...item })
                })
            } else {
                let tabsDeep = uni.$u.deepClone(otherTabs);
                tabsDeep.forEach((item, index) => {
                    if (index <= 1 || (index == 2 && this.userInfo.pub_card)) {
                        this.$set(this.tabs.list, index, { ...uni.$u.deepClone(defaultTagObj), ...item })
                    }
                })
            }
            this.reqData(false)
            // console.log(this.tabs);
        },
        showWater(tab) {
            return tab.list.length || (tab.name == "动态" && this.isMine && this.draftListByDynamic.length) || (tab.name == "卡册" && this.isMine && this.draftListByCardBook.length)
        },
        waterScroll(event) {
            if (app.platform.systemInfo.platform == "android") {
                // console.log("waterScroll", event.contentOffset);
                waterY = event.contentOffset.y
            }

        },
        onClickFollow() {
            followActionByUser(this.userInfo.userId, this.userInfo.isFollow).then(() => {
                this.userInfo.isFollow ? this.userInfo.fans -= 1 : this.userInfo.fans += 1
                this.userInfo.isFollow = !this.userInfo.isFollow
            })
        },
        listTouchMove(event) {
            if (app.platform.systemInfo.platform == "android") {
                if (this.onTouch) {

                    const gap = event.changedTouches[0].screenY - agoListY
                    // console.log(gap, waterY, this.stickyTabs);
                    if (gap > 1 && waterY >= -5 && this.stickyTabs) {
                        console.log("滚动", this.$refs.tabsWrap);
                        dom.scrollToElement(this.$refs.tabsWrap, {
                            offset: 0,
                            animated: false
                        })
                        waterY = 0
                        this.$refs.transitionNav && this.$refs.transitionNav.setPageScroll({
                            scrollTop: 0
                        })
                    }
                }
            }
        },
        listTouch(event) {
            if (app.platform.systemInfo.platform == "android") {
                // console.log(event);
                this.onTouch = event.type == "touchstart"
                if (this.onTouch) {
                    agoListY = event.changedTouches[0].screenY
                }
                console.log("touch状态", this.onTouch);
            }

        },
        listSetSpecialEffects(index) {
            this.$nextTick(() => {
                // console.log(this.navHeight);
                // console.log(this.topHeight);
                // console.log(this.tabsHeight);
                // console.log(this.userInfoWrapHeight);
                this.$refs[`waterfalls${index}`] && this.$refs[`waterfalls${index}`][0].swiperChange("pageId", this.userInfoWrapHeight - this.navHeight)
            })
        },
        goTopRef(index) {
            this.$refs[`waterfalls${index}`] && this.$refs[`waterfalls${index}`][0].goTop()
        },
        swiperChange(event) {
            this.tabs.index = event.detail.current
        },
        async scroll(event) {
            //想要渐变导航栏就用下面的代码
            this.$refs.transitionNav && this.$refs.transitionNav.setPageScroll({
                scrollTop: -event.contentOffset.y.toFixed(2)
            })
            // console.log(-event.contentOffset.y);
            const dom = await this.getDomInfo("#tabs")
            // console.log(dom.top);
            // if (this.stickyTabs) return
            this.stickyTabs = dom.top <= this.navHeight - 1
        },
        pageJump(url) {
            uni.navigateTo({
                url: url
            })
        },
        loadmore() {
            // this.list.push(...this.list)
            if (this.current.isFetchEnd) return
            this.current.queryParams.fetchFrom += this.current.queryParams.fetchSize
            this.reqData(false)
        },
        refresh() {
            setTimeout(() => {
                this.$refs.waterfall.hideRefresh()
            }, 500)
        },
        getDomHeight(dom) {
            return new Promise((re, rj) => {
                uni.createSelectorQuery()
                    .select(dom)
                    .boundingClientRect((rect) => {
                        if (rect) {
                            re && re(rect.height)
                        }
                    })
                    .exec();
            })
        },
        setDomHeight() {
            setTimeout(() => {
                this.$nextTick(async () => {
                    this.topHeight = await this.getDomHeight("#topContainer")
                    this.tabsHeight = await this.getDomHeight("#tabs")
                    this.userInfoWrapHeight = await this.getDomHeight("#userInfoWrap")
                    // #ifdef APP-PLUS
                    this.scrollViewHeight = app.platform.systemInfo.screenHeight - this.navHeight - this.tabsHeight
                    // #endif
                    // #ifdef H5
                    this.scrollViewHeight = 666
                    // #endif
                    this.initTab()
                })
            }, 100)
        },
        getUserInfo() {
            const url = this.isMine ? `cardCircle/me/home` : `cardCircle/user/home`
            app.http.Get(`dataApi/${url}`, { userId: this.userId }, (res) => {
                this.userInfo = res.data
                this.setDomHeight()

            }, () => {
                this.setDomHeight()
            })
        },
        getDomInfo(dom) {
            return new Promise((re, rj) => {
                uni.createSelectorQuery()
                    .select(dom)
                    .boundingClientRect((rect) => {
                        if (rect) {
                            re && re(rect)
                        }
                    })
                    .exec();
            })
        },
        reqData(isRefresh = false, cb) {
            //------------mock------------
            // this.current.firstReqEnd = false
            // if (isRefresh) {
            //     this.current.list = []
            //     this.$refs['waterfalls' + this.tabs.index] && (this.$refs['waterfalls' + this.tabs.index][0].tempList = [])
            // }
            // this.current.list.push(...uni.$u.randomArray(mockList))
            // this.current.firstReqEnd = true
            // this.listSetSpecialEffects(this.tabs.index)
            // cb && cb()
            //------------mock------------
            app.http.Get(`dataApi/${this.current.url}${this.isMine ? "" : this.userId}`, this.current.queryParams, (res) => {
                const list = (res.list || []).map(item => {
                    if (this.current.name == '中卡') {
                        return {
                            cover: item.pic.split(",")[0],
                            title: item.name,
                            type: "中卡",
                            pic: item.pic
                        }
                    }
                    return item
                })
                // console.log(list);
                this.current.firstReqEnd = true
                this.current.isFetchEnd = res.isFetchEnd
                if (res.scrollId) this.current.queryParams.scrollId = res.scrollId
                if (isRefresh) {
                    this.current.list = []
                    this.$refs['waterfalls' + this.tabs.index] && (this.$refs['waterfalls' + this.tabs.index][0].tempList = [])
                }
                this.current.list.push(...list)
                this.current.firstReqEnd = true
                this.listSetSpecialEffects(this.tabs.index)
                cb && cb()
            }, (err) => {
                this.current.firstReqEnd = true
            })
        }
    }
};
</script>
<style lang='scss'>
// #ifndef APP-NVUE
page {
    background-color: #f6f7fb;
}

// #endif
.userInfoWrap {
    width: 750rpx;
    // height: 583rpx;
    // position: relative;
    flex-direction: column;
    align-items: center;
    display: flex;
    background-color: #333333;
    padding-bottom: 71rpx;
}

.fixImg {
    position: fixed;
    width: 750rpx;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    z-index: 0;
}

.userInfo {
    z-index: 1;
    width: 750rpx;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    padding: 0 35rpx;
    display: flex;
    flex-direction: row;
    margin-top: 24rpx;
    flex: 1;
    // background-color: red;
}

.userInfo_avatar {
    width: 108rpx;
    height: 108rpx;
    border-radius: 50%;
    margin-right: 25rpx;
}

.stickyHeader {
    position: sticky;
    // top: 0;
    // background-color: #fff;
}

.userInfo_msg {
    flex: 1;
    flex-direction: column;
}

.userInfo_name {
    display: flex;
    align-items: center;
    flex-direction: row;
}

.userInfo_name_text {
    font-size: 31rpx;
    font-family: PingFang SC;
    font-weight: 500;
    color: #FFFFFF;
}

.userInfo_name_title {
    width: 114rpx;
    height: 33rpx;
    background: #FFFFFF;
    border-radius: 3rpx;
    font-size: 31rpx;
    font-family: PingFang SC;
    font-weight: 500;
    color: #333333;
    text-align: center;
    line-height: 33rpx;
    margin-left: 23rpx;
}

.userInfo_ip_text {
    font-size: 21rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #FFFFFF;
}

.descWrap {
    width: 750rpx;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    padding: 0 35rpx;
    margin-top: 38rpx;
    // height: 70rpx;
}

.desc_text {
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #FFFFFF;
    line-height: 34rpx;

}

.userDataWrap {
    display: flex;
    flex-direction: row;
    width: 750rpx;
    // #ifndef APP-NVUE
    box-sizing: border-box;
    // #endif
    padding: 0 35rpx;
    margin-top: 60rpx;
    // justify-content: space-between;
}

.userData_item {
    // background-color: red;
    display: flex;
    flex-direction: column;
}

.userData_num {
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #FFFFFF;
    text-align: center;
}

.userData_name {
    font-size: 21rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #FFFFFF;
    text-align: center;
}

.userData_data {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    width: 400rpx;
}

.tabsWrap {
    width: 750rpx;
    height: 103rpx;
    justify-content: center;
    align-items: center;
}

.tabs {
    width: 500rpx;
    flex-direction: row;
    justify-content: center;
}

.flex1 {
    flex: 1;
}

.userData_follow {
    width: 140rpx;
    height: 62rpx;
    background: #FA1545;
    border-radius: 3rpx;
    font-size: 29rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #FFFFFF;
    text-align: center;
    line-height: 62rpx;
}

.userData_follow_dis {
    background-color: #c9d0d7;
}

.userData_edit {
    width: 176rpx;
    height: 62rpx;
    background-color: rgba(0, 0, 0, 0.38);
    border: 1rpx solid #E6E6E6;
    border-radius: 3rpx;
    font-size: 29rpx;
    font-family: PingFang SC;
    font-weight: bold;
    text-align: center;
    line-height: 62rpx;
    color: #FFFFFF;
}

.draftWrap {
    width: 360rpx;
    height: 287rpx;
    position: relative;
    border-radius: 3rpx;
    margin-bottom: 10rpx;
}

.draftWrapImage {
    position: absolute;
    width: 360rpx;
    height: 277rpx;
    left: 0;
    top: 0;
    border-radius: 3rpx;
}

.shadow {
    position: absolute;
    width: 360rpx;
    height: 277rpx;
    left: 0;
    top: 0;
    background-color: rgba(0, 0, 0, .5);
    align-items: center;
}

.caogaoIcon {
    margin-top: 74rpx;
    width: 61rpx;
    height: 55rpx;
}

.caogaoTitle {
    font-size: 25rpx;
    font-family: PingFang SC;
    font-weight: bold;
    color: #ECEFF6;
    margin-top: 17rpx;
    margin-bottom: 10rpx;
}

.caogaoText {
    font-size: 21rpx;
    font-family: PingFang SC;
    font-weight: 400;
    color: #ECEFF6;
}
</style>