<template>
	<view>
		<view class="tabbar" :class="{'tabbarDetail':detail}" :style="{'height':tabHeight+'px'}">
			<view class="tabbar-chat" :class="{'chatDetail':detail}" @click="onClickChat"><text class="chat-text">说点什么...</text></view>
			<view class="tabbar-gn">
				<view class="tabbar-item" v-for="(item,index) in tabbarData" :key="index" @click="onClickTabbar(index)">
					<view class="pic-box">
						<image :class="'pic-'+index" :src="detail?getIcon(item.boolean,index):(item.boolean?item.piced:item.pic)" />
					</view>
					<text class="num" :class="{'numDetail':detail}">{{item.num}}</text>
				</view>
			</view>
		</view>

		
	</view>
</template>
<script>
	const app = getApp().globalData.app;
	const tabbarData = {
		comment:{pic:'../../static/information/live_pl.png',piced:'',num:0,boolean:false},
		likes:{pic:'../../static/information/live_like.png',piced:'../../static/information/icon_t_liked.png',num:0,boolean:false},
		favorite:{pic:'../../static/information/live_collect.png',piced:'../../static/information/icon_t_collectd.png',num:0,boolean:false}
	}
	export default {
		props: {
			commentNum: {
				type: Number,
				default: 0
			},
			deleteHeight:{
				type: Number,
				default: 0
			},
			show: {
				type: Boolean,
				default: true
			},
			data: {
				type: Object,
				default: () => {
					return {};
				}
			},
			detail: {
				type: Boolean,
				default: false
			},
		},
		watch: {
			data: function(val) {
				console.log('data--',val);
				this.setTabbarNum(val)
			},
			commentNum:function(val){
				this.tabbarData.comment.num = val;
			},
			deleteHeight:function(val){
				this.tabHeight = uni.upx2px(124) + val;
				console.log(val);
			}
		},
		mounted() {
			this.tabHeight = uni.upx2px(124) + this.deleteHeight
		},
		data() {
			return {
				tabbarData:{...tabbarData},
				tabHeight:0
			};
		},
		methods: {
			getIcon(boolean,name){
				let url = '../../static/information/';
				if(name=='comment') return `${url}icon_t_pl.png`;

				return `${url}icon_t_${name=='likes'?'like':'collect'}${boolean?'d':''}.png`
			},	
			onClickChat(){
				this.$emit('comment')
			},
			setTabbarNum(data){
				let tab = {
					comment:{num:data.comment||0,boolean:false},
					likes:{num:data.likes||0,boolean:data.isLikes},
					favorite:{num:data.favorite||0,boolean:data.isFavorite}
				}
				for (const key in this.tabbarData) {
					this.tabbarData[key].num = tab[key].num;
					this.tabbarData[key].boolean = tab[key].boolean;
				}
			},
			onClickTabbar(str){
				uni.$u.throttle(()=>{
					app.platform.hasLoginToken(()=>{
						if(str == 'comment'){
							this.$emit('comment')
						}else if( str == 'likes' || str == 'favorite'){
							const isLikes = str == 'likes';
							const url = isLikes ? 'like/or/cancel' : 'favorite/or/unFavorite'
							console.log(`article/${url}/${this.data.articleCode}`);
							app.http.Post(`article/${url}/${this.data.articleCode}`,{},(res)=>{
								this.tabbarData[str].boolean = isLikes ? res.liked : res.isFavorite;
								this.tabbarData[str].num = isLikes ? res.likes : res.favorite;

								let data = {
									articleCode:this.data.articleCode,
									comment:this.tabbarData.comment.num,
								}
								if(isLikes){
									data.isLikes = res.liked;
									data.likes = res.likes
								}else{
									data.favorite = res.favorite;
									data.isFavorite = res.isFavorite
								}
								uni.$emit('informationChange', data)
								
							})
						}
					})
				},500)
			}
		}
	};
</script>

<style lang="scss">
	.tabbar{
		width: 750rpx;
		height: 124rpx;
		background:#272727;
		position: fixed;
		bottom:0;
		left:0;
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		padding-left:44rpx;
		padding-right:44rpx;
		padding-top: 30rpx;
		z-index: 8;
	}
	.tabbarDetail{
		background:#fff;
		border-top-width: 1px;
		border-top-style: solid;
		border-top-color: #E8E8E8;
	}
	.tabbar-chat{
		width: 332rpx;
		height: 63rpx;
		background: #555555;
		border-radius: 3rpx;
		line-height: 63rpx;
		padding:0 30rpx;
		display: flex;
		flex-direction: row;
		align-items: center;
	}
	.chatDetail{
		background: #EFEFEF;
	}
	.chat-text{
		font-size: 25rpx;
		font-family: PingFang SC;
		font-weight: 400;
		color: #88878C;
	}
	.tabbar-gn{
		width: 250rpx;
		height:80rpx;
		display: flex;
		align-items: center;
		flex-direction: row;
		justify-content: space-between;
	}
	.tabbar-item{
		width: 50rpx;
		height:80rpx;
		
	}
	.pic-box{
		width: 50rpx;
		height:43rpx;
		display: flex;
		align-items: center;
		justify-content: center;
	}
	.pic-comment{
		width: 35rpx;
		height:33rpx;
	}
	.pic-likes{
		width: 33rpx;
		height:34rpx;
	}
	.pic-favorite{
		width: 37rpx;
		height:35rpx;
	}
	.num{
		width: 50rpx;
		font-size: 23rpx;
		font-family: PingFang SC;
		font-weight: 400;
		color: #FFFFFF;
		text-align: center;
	}
	.numDetail{
		color: #333333;
	}
</style>
